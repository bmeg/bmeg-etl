build = lathe.Workflow("build")

addSifterTasks = function(dir) {
    lathe.Plugin(`sifter scan scripts -j -b ./ ${dir}`).map( x => {
        out = {
            commandLine: `sifter run ${x.path}`,
            inputs: {},
            outputs: {},
        }
        x.inputs.forEach( (y,i) => {
            out["inputs"][`input_${i}`] = y
        })
        x.outputs.forEach( (y,i) => {
            out["outputs"][`output_${i}`] = y
        })
        return out
    }).forEach( x => {
        build.Add(lathe.Process(x))
    })
}

addSifterTasks("./transform")


alleleFiles = {}

lathe.Plugin("sifter scan objects -s -j ./transform").filter(x => {
    return x["objectType"] == "Allele"
}).forEach( (x,i) => {
    //println(x["outFile"])
    alleleFiles[ `allele_${i}` ] = x["outFile"]
})

build.Add(lathe.Process({
    shell: "cat {{#each inputs}} {{ this }}{{/each}} > {{outputs.mergeFile}}",
    outputs: {
        mergeFile: "output-normalize/allele.merge.json.gz"
    },
    inputs: alleleFiles
}))

addSifterTasks("./normalize")

p = lathe.LoadPlan("./normalize/allele/process.plan")

build.Add(p["build"])

addSifterTasks("./graph-build")