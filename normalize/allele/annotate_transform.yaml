
class: sifter

name: annotatedAllele
outdir: ../../output/allele

config:
  vcfPath: ../../output-normalize/allele.annotated.vcf
  schema: ../../schema/


inputs:
  vcfData:
    tableLoad:
      input: "{{config.vcfPath}}"
      columns:
          - CHROM
          - POS
          - ID
          - REF
          - ALT
          - QUAL
          - FILTER
          - INFO

pipelines:
  transform:
    - from: vcfData
    - project:
        mapping:
          id: "GRCh38:{{row.CHROM}}:{{row.POS}}:{{row.REF}}:{{row.ALT}}"
          submitter_id: "GRCh38:{{row.CHROM}}:{{row.POS}}:{{row.REF}}:{{row.ALT}}"
          project_id: Reference
          reference_bases: "{{row.REF}}"
          alternate_bases: "{{row.ALT}}"
          chromosome: "{{row.CHROM}}"
          genome: GRCh38
    - map:
        method: fix
        gpython: |
          header = "Allele | Annotation | Annotation_Impact | Gene_Name | Gene_ID | Feature_Type | Feature_ID | Transcript_BioType | Rank | HGVS.c | HGVS.p | cDNA.pos / cDNA.length | CDS.pos / CDS.length | AA.pos / AA.length | Distance | ERRORS / WARNINGS / INFO".split(" | ")
          def fix(row):
            row["start"] = int(row["POS"])
            row["end"] = row["start"] + len(row["REF"])
            t = row["INFO"].split("=")
            o = []
            if len(t) > 1:
              a = t[1].split(",")
              for n, i in enumerate(a):
                b = dict(zip(header, i.split("|")))
                b["hgvsc"] = b["HGVS.c"]
                b["hgvsp"] = b["HGVS.p"]
                b["biotype"] = b["Transcript_BioType"]
                b["impact"] = b["Annotation_Impact"]
                b["annotation"] =  b["Annotation"]
                b["hugo_symbol"] = b["Gene_Name"]
                b["ensembl_gene"] = b["Gene_ID"]
                if b["Feature_Type"] == "transcript":
                  b["ensembl_transcript"] = b["Feature_ID"].split(".")[0]
                aa = b["AA.pos / AA.length"]
                if len(aa):
                  aa_pos, aa_len = aa.split("/")
                  b["aa_position"] = int(aa_pos)
                  b["aa_length"] = int(aa_len)
                cds = b["CDS.pos / CDS.length"]
                if len(cds):
                  cds_pos, cds_len = cds.split("/")
                  b["cds_position"] = int(cds_pos)
                  b["cds_length"] = int(cds_len)
                cdna = b["cDNA.pos / cDNA.length"]
                if len(cdna):
                  cdna_pos, cdna_len = cdna.split("/")
                  b["cdna_position"] = int(cdna_pos)
                  b["cdna_length"] = int(cdna_len)
                b["id"] = row["id"] + "/" + str(n)
                o.append(b)
            row["effects"] = o
            return row


  allele:
    - from: transform
    - map:
        method: fix
        gpython: |
          def fix(row):
            o = []
            for i in row["effects"]:
              o.append( {"id" : i["id"]} )
            row["effects"] = o
            return row
    - objectValidate:
        schema: "{{config.schema}}"
        title: Allele
    - emit:
        name: allele

  alleleEffect:
    - from: transform
    - flatMap:
        method: fix
        gpython: |
          def fix(row):
            return row["effects"]
    - objectValidate:
        schema: "{{config.schema}}"
        title: AlleleEffect
    - emit:
        name: alleleEffect