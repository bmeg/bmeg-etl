name: chemblSynonyms
outdir: ../../tables/

config:
  sqlite:  ../../source/chembl/chembl_34/chembl_34_sqlite/chembl_34.db
  schema: ../../schema/

inputs:
  sqlQuery:
    sqliteLoad:
      input: "{{config.sqlite}}"
      query: "select * from MOLECULE_DICTIONARY as a INNER JOIN MOLECULE_SYNONYMS as b on a.MOLREGNO=b.MOLREGNO"
  sqlQueryIUPAC:
    sqliteLoad:
      input: "{{config.sqlite}}"
      query: "SELECT * FROM (SELECT *, ROW_NUMBER() OVER(
         PARTITION BY UPPER(synonyms)
         ORDER BY priority
         ) as precedence  FROM (SELECT 1 AS priority, chembl_id, a.molregno, synonyms
        FROM 
          MOLECULE_DICTIONARY as a 
            INNER JOIN 
          MOLECULE_SYNONYMS as b 
            on a.molregno=b.molregno 
           
           UNION ALL
           SELECT 2 AS priority, chembl_id, a.molregno, compound_name AS synonyms
        FROM
          MOLECULE_DICTIONARY as a
            INNER JOIN
          (SELECT *
           FROM (
             SELECT
               molregno,
               compound_name,
               RANK() OVER(
                 PARTITION BY UPPER(compound_name)
                 ORDER BY COUNT(*) DESC
               ) as rnum
             FROM COMPOUND_RECORDS
             WHERE compound_name != ''
             GROUP BY molregno, UPPER(compound_name)
           )
         WHERE rnum = 1
        ) as c
          on a.MOLREGNO=C.MOLREGNO))WHERE precedence = 1"
##      query: "WITH syntable AS (SELECT 1 AS priority, chembl_id, a.molregno, synonyms
##        FROM 
##          MOLECULE_DICTIONARY as a 
##            INNER JOIN 
##          MOLECULE_SYNONYMS as b 
##            on a.molregno=b.molregno 
##           ),
##           nametable AS (SELECT 2 AS priority, chembl_id, a.molregno, compound_name AS synonyms 
##        FROM 
##          MOLECULE_DICTIONARY as a 
##            INNER JOIN
##          (SELECT *
##           FROM (
##             SELECT 
##               molregno, 
##               compound_name, 
##               ROW_NUMBER() OVER(
##                 PARTITION BY compound_name
##                 ORDER BY COUNT(*) DESC
##               ) as rnum
##             FROM COMPOUND_RECORDS
##             WHERE compound_name != ''
##             GROUP BY molregno, compound_name
##           )
##         WHERE rnum = 1
##        ) as c
##          on a.MOLREGNO=C.MOLREGNO)
##     SELECT * FROM(
##       SELECT *, RANK() OVER(
##         PARTITION BY synonyms
##         ORDER BY priority
##         ) as precedence
##       FROM(
##         SELECT * 
##           FROM syntable
##         UNION ALL
##         SELECT * 
##           FROM nametable
##       )
##     )
##     WHERE precedence = 1"


pipelines:
  buildTable:
    - from: sqlQuery
    - accumulate:
        field: molregno
        dest: recs
    - map:
        method: fix
        gpython: |
          def fix(row):
            s = []
            for i in row["recs"]:
              s.append(i["synonyms"])
            row["synonyms"] = s
            return row
    - project:
        mapping:
          id: "{{row.molregno}}"
    - clean: 
        fields:
          - id
          - synonyms
    - emit:
        name: synonyms
  longTable:
    - from: sqlQueryIUPAC
    - project:
        mapping:
          id: "{{row.chembl_id}}"
    - clean:
        fields:
          - id
          - synonyms
    - emit:
        name: synonyms
