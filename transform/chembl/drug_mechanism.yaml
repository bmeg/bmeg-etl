
class: sifter

name: chembDrugMechanismExtract
outdir: ../../output/chembl

config:
  sqlite:  ../../source/chembl/chembl_30/chembl_30_sqlite/chembl_30.db
  #uniprot2gene: ../../mappings/uniprotId2ensemblGene.tsv
  schema: ../../src/bmeg/bmeg-dictionary/gdcdictionary/schemas/


inputs:
  sqlQuery:
    sqliteLoad:
      input: "{{config.sqlite}}"
      query: "select * from drug_mechanism as a LEFT JOIN MECHANISM_REFS as b on a.MEC_ID=b.MEC_ID LEFT JOIN TARGET_COMPONENTS as c on a.TID=c.TID LEFT JOIN COMPONENT_SEQUENCES as d on c.COMPONENT_ID=d.COMPONENT_ID LEFT JOIN MOLECULE_DICTIONARY as e on a.MOLREGNO=e.MOLREGNO"

pipelines:
  build:
    - from: sqlQuery
    #- lookup:
    #    tsv:
    #      input: "{{config.uniprot2gene}}"
    #      key: id
    #    lookup: "{{row.accession}}"
    #    copy:
    #      protein: alternative
    - regexReplace:
        field: ref_url
        regex: 'http:\/\/europepmc\.org\/abstract\/MED\/'
        replace: 'ncbi.nlm.nih.gov/pubmed/'
        dst: publications
    - project:
        mapping:
          association_type: "{{row.action_type}}"
          compound: "{{row.chembl_id}}"
          genes: ["{{row.protein}}"]
          project_id: Project:reference
          submitter_id: "CHEMBL-MEC:{{row.mec_id}}"
          type: protein_drug_association
    - fieldType:
        genes: list
        ref_url: list

    - reduce:
        field: mec_id
        method: merge
        gpython: |

          def join(x,y):
            if not isinstance(x,list):
              x = [x]
            if not isinstance(y,list):
              y = [y]
            return x+y

          def merge(x, y):
            for i in y:
              if i in x:
                if x[i] != y[i]:
                  x[i] = join(x[i], y[i])
              else:
                x[i] = y[i]
            return x

    - objectValidate:
        class: protein_drug_association
        schema: "{{config.schema}}"
    - emit:
        name: protein_drug_association
