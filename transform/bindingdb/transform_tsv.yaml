
class: sifter
name: bindingdbTsv

outdir: ../../output/bindingdb/

config:
  tsv: ../../source/bindingdb/BindingDB_All.tsv
  schema: ../../schema

inputs:
  bindingdb:
    plugin:
      commandLine: ./tsvParse.py {{config.tsv}}

pipelines:
  debug:
    - from: bindingdb
    - emit:
        name: debug
  start:
    - from: bindingdb
    - map:
        method: fix
        gpython: |
          def fix(row):
            protein = row["UniProt (SwissProt) Primary ID of Target Chain"]
            compound = row["ChEMBL ID of Ligand"]
            pstring = ""
            pfinal = []
            for p in protein:
              pstring+=p
              if len(p):
                pfinal.append(p)
            if pstring == "" or compound == "":
              return {"association_type":""}
            try:
              kiFloat = float(row["Ki (nM)"])
            except ValueError:
              kiFloat = None
            out = {
              "id" : "bindingdb/%s" % (row["BindingDB Reactant_set_id"]),
              "association_type" : "binding",
              "compound" : compound,
              "proteins" : [ {"id" : p} for p in pfinal],
              "submitter_id" : row["BindingDB Reactant_set_id"],
              "source" : row["Curation/DataSource"],
              "ki_nm" : kiFloat,
              "project_id" : "bindingdb"
            }
            if len(row["PMID"]):
              out["publications"] = [ {"id" : "pmid/" + row["PMID"]} ]
            return out
    - filter:
        field: association_type
        check: hasValue
    - objectValidate:
        schema: "{{config.schema}}"
        title: ProteinCompoundAssociation
    - emit:
        name: protein_compound_association
