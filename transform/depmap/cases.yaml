

class: sifter
name: depmap-cases
outdir: ../../output/depmap/

config:
  modelFile: ../../source/depmap/Model.csv
  schema: ../../schema/
  cellosarus: ../../tables/cellosarusSynonyms.caseTable.ach2cellosaurus.json.gz

inputs:
  model:
    tableLoad:
      input: "{{config.modelFile}}"
      sep: ","

pipelines:
    
  samples:
    - from: model
    - lookup:
        json: 
          input: "{{config.cellosarus}}"
          key: depmap_id
          value: cellosaurus_id
        lookup: "{{row.ModelID}}"
        copy:
          cellosaurus_id: cellosaurus_id
    - map:
        method: fix
        gpython: |
          def fix(row):
            if "cellosaurus_id" not in row:
              row["cell_id"] = row["ModelID"]
            else:
              row["cell_id"] = row["cellosaurus_id"]
            return row
    - project:
        mapping:
          id: "sample/{{row.ModelID}}"
          submitter_id: "{{row.ModelID}}"
          project_id: DepMap
          sample_id: "sample/{{row.ModelID}}"
          case: [ {"id" : "case/{{row.cell_id}}" } ]
          type: Sample


  sampleObjects:
    - from: samples
    - objectValidate:
        schema: "{{config.schema}}"
        title: Sample
    - emit:
        name: sample

  depMapCases:
    - from: samples
    - filter:
        method: find
        gpython: |
          def find(row):
            if "cellosaurus_id" not in row:
              return True
            return False
    - project:
        mapping:
          id: "case/{{row.cell_id}}"
          case_id: "case/{{row.cell_id}}"
          comment: "{{row.OncotreePrimaryDisease}}"
          type: Case
          projects: [ {"id": "project/cellosaurus"} ] # this is a bit of a hack to keep all the cellline within the same project
    - objectValidate:
        schema: "{{config.schema}}"
        title: Case
    - emit:
        name: case

  aliquots:
    - from: model
    - project:
        mapping:
          id: "aliquot/{{row.ModelID}}"
          submitter_id: "{{row.ModelID}}"
          project_id: DepMap
          aliquot_id: "Aliquot:{{row.ModelID}}"
          sample: [ {"id" : "sample/{{row.ModelID}}" } ]
    - objectValidate:
        schema: "{{config.schema}}"
        title: Aliquot
    - emit:
        name: aliquot