
class: sifter

name: ensembl_gtf
outdir: ../../output/ensembl

config:
  gffPath: ../../source/ensembl/Homo_sapiens.GRCh38.108.chr_patch_hapl_scaff.gtf.gz
  genomeBuild: GRCh38
  schema: ../../schema/

inputs:
  gff:
    tableLoad:
      input: "{{config.gffPath}}"
      lazyQuotes: true
      columns:
        - seqID
        - source
        - feature
        - start
        - end
        - score
        - strand
        - phase
        - attributes

pipelines:
  transform:
    - from: gff
    - map:
        method: fix
        gpython: |
          def fix(row):
            aText = row["attributes"]
            o = {}
            for i in aText.rstrip().split(";"):
              if len(i):
                k, v = i.strip().split(' ', 1)
                o[k] = v.strip('"')
            row["attributes"] = o
            return row

  transcripts:
    - from: transform
    - filter:
        field: feature
        match: transcript
    - project:
        mapping:
          id: "{{row.attributes.transcript_id}}"
          feature_id: "{{row.attributes.transcript_id}}"
          biotype: "{{row.type}}"
          submitter_id: "{{row.attributes.transcript_id}}"
          transcript_id: "{{row.attributes.transcript_id}}"
          project_id: "Reference"
          chromosome: "chr{{row.seqID}}"
          genome: "{{config.genomeBuild}}"
          gene: "{{row.attributes.gene_id}}"
    - regexReplace:
        field: gene
        regex: "^gene:"
        replace: ""
    - project:
        mapping:
          gene: [ {"id" : "{{row.gene}}" } ]
    - fieldType:
        end: integer
        start: integer
    - objectValidate:
        schema: "{{config.schema}}"
        title: Transcript
    - emit:
        name: Transcript

  exons:
    - from: transform
    - filter:
        field: feature
        match: exon
    - project:
        mapping:
          id: "{{row.attributes.exon_id}}"
          feature_id: "{{row.attributes.exon_id}}"
          biotype: "{{row.type}}"
          submitter_id: "{{row.attributes.exon_id}}"
          exon_id: "{{row.attributes.exon_id}}"
          project_id: "Reference"
          chromosome: "chr{{row.seqID}}"
          genome: "{{config.genomeBuild}}"
          transcripts: [ {"id" : "{{row.attributes.transcript_id}}"} ]
    - fieldType:
        end: integer
        start: integer
    - regexReplace:
        field: transcripts
        regex: "^transcript:"
        replace: ""
    - objectValidate:
        schema: "{{config.schema}}"
        title: Exon
    - emit:
        name: Exon

  genes:
    - from: transform
    - filter:
        field: feature
        match: gene
    - project:
        mapping:
          id: "{{row.attributes.gene_id}}"
          feature_id: "{{row.attributes.gene_id}}"
          biotype: "{{row.type}}"
          submitter_id: "{{row.attributes.gene_id}}"
          gene_id: "{{row.attributes.gene_id}}"
          project_id: "Reference"
          chromosome: "chr{{row.seqID}}"
          genome: "{{config.genomeBuild}}"
          description: "{{row.attributes.description}}"
          symbol: "{{row.attributes.gene_name}}"
    - fieldType:
        end: integer
        start: integer
    - objectValidate:
        schema: "{{config.schema}}"
        title: Gene
    - emit:
        name: Gene
