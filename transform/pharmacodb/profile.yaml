
class: sifter

outdir: ../../output/pharmacodb/
name: pharmacodb_profiles_gx

config:
  #treatmentResponseFile: ../../tables/pharmacodb_profiles.tsv
  treatmentResponseFile: ../../tables/pharmacodb_blendedTreatment.tsv
  synonymsFile: ../../tables/chemblSynonyms.longTable.synonyms.json.gz
  schema: ../../schema/

inputs:
  profileReader:
    tableLoad:
      input: "{{config.treatmentResponseFile}}"
      sep: "\t"

pipelines:
  transform:
    - from: profileReader
    - map:
        method: cleanDoseViability
        gpython: |
          def cleanDoseViability(row):
            #group the individual dose and viabilities together:
            row["dose"] = {}
            row["response"] = {}
            for key in row:
              if key[0:4] == "rawD":
                row["dose"][key[4:]] = row[key]
              elif key[0:4] == "rawV":
                row["response"][key[4:]] = row[key]
            #connect the doses and viabilitiess together
            dosePairs = []
            newDose = []
            newResponse = []
            for dose in row["dose"]:
              try:
                nd = float(row["dose"][dose])
              except:
                continue
              else:
                dosePairs.append((nd, float(row["response"][dose])))
            dosePairs.sort(key=lambda pair: pair[0])
            pairs = list(zip(*dosePairs))
            row["dose_um"] = list(pairs[0])
            row["response"] = list(pairs[1])

            #find the profile measurements and make sure to grab the right ones
            responseMetrics = []
            for field in row:
              if field[0:12] == "profileInfo_":
                responseMetrics.append(field)
            recompute = []
            for field in responseMetrics:
              if len(row[field]) > 0:
                if field[-10:] == "RECOMPUTED":
                  recompute.append(field)
                else:
                  id = field[12:15]
                  if id == "IC5":
                    row["ic50"] = float(row[field])
                  elif id == "EC5":
                    row["ec50"] = float(row[field])
                  elif id == "AAC":
                    row["aac"] = float(row[field])
                  elif id == "AUC":
                    row["auc"] = float(row[field])
                  elif id == "EIN" or id == "E_I" or id == "EMA":
                    row["einf"] = float(row[field])
                  elif id[:2] == "HS" or id == "SLO":
                    row["hs"] = float(row[field])
            for field in recompute:
              id = field[12:15]
              if id == "IC5":
                row["ic50"] = float(row[field])
              elif id == "EC5":
                row["ec50"] = float(row[field])
              elif id == "AAC":
                row["aac"] = float(row[field])
              elif id == "AUC":
                row["auc"] = float(row[field])
              elif id == "EIN" or id == "E_I" or id == "EMA":
                row["einf"] = float(row[field])
              elif id[:2] == "HS" or id == "SLO":
                row["hs"] = float(row[field])
            
            if "Cellosaurus.Accession.id" in row:
              row["case"] = {"id": row["Cellosaurus.Accession.id"]}
            if "depmap_id" in row:
              row["case"] = {"id": row["depmap_id"]}            
            if not ("UNIQUEtreatmentid" in row) or row["UNIQUEtreatmentid"]=='':
              row["UNIQUEtreatmentid"] = row["treatmentid"]
            if ":" in row["UNIQUEtreatmentid"]:
              UNIQUEid = " (".split(row["UNIQUEtreatmentid"])[0]
            else:
              UNIQUEid = row["UNIQUEtreatmentid"]
            row["drug0"] = ""
            row["drug1"] = ""
            row["drug2"] = ""
            
            for drugnum in range(0, len(":".split(UNIQUEid))):
              row["drug" + str(drugnum)] = ":".split(UNIQUEid)[drugnum]
            
            project = row["project"].split("_")[0]
            row["id"] = "drugResponse/" + project + ":pharmacodb:" + row["sampleid"] + ":" + row["treatmentid"]
            row["project_id"] = "project/" + project
            row["submitter_id"] = row["experimentID"]
            #row["compounds"] = {"id": row['projecttreatmentid']}
            row["aliquot"] = {"id": "aliquot/" + project + ":pharmacodb:" + row["sampleid"]}
            row["aliquotSubID"] = project + ":pharmacodb:" + row["sampleid"]
            row["sample"] = {"id": "sample/" + project + ":pharmacodb:" + row["sampleid"]}
            return row
    - lookup:
        json:
          input: "{{config.synonymsFile}}"
          key: synonyms
        lookup: "{{row.drug0}}"
        copy:
          chembl0: id
    - lookup:
        json:
          input: "{{config.synonymsFile}}"
          key: synonyms
        lookup: "{{row.drug1}}"
        copy:
          chembl1: id
    - lookup:
        json:
          input: "{{config.synonymsFile}}"
          key: synonyms
        lookup: "{{row.drug2}}"
        copy:
          chembl2: id
    - map:
        method: finalclean
        gpython: |
          def finalclean(row):
            row["compounds"] = []
            for key in row:
              if key[0:6] == "chembl" and len(row[key]) > 0:
                row["compounds"].append({"id": row[key]})
              print(row["UNIQUEtreatmentid"])
            return row
 
  drugResponse:
    - from: transform
    - objectValidate:
        title: DrugResponse
        schema: "{{config.schema}}"
    - emit:
        name: drug_response
  aliquot:
    - from: transform
    - project:
        mapping:
          id: "{{row.aliquot.id}}"
          submitter_id: "{{row.aliquotSubID}}"
    - distinct:
        value: "{{row.id}}"
    - objectValidate:
        title: Aliquot
        schema: "{{config.schema}}"
    - emit:
        name: aliquot
  sample:
    - from: transform
    - project:
        mapping:
          id: "{{row.sample.id}}"
          submitter_id: "{{row.aliquotSubID}}"
    - distinct:
        value: "{{row.id}}"
    - objectValidate:
        title: Sample
        schema: "{{config.schema}}"
    - emit:
        name: sample

    
