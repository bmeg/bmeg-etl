
outdir: ../../output/pharmacodb/
name: pharmacodb_profiles

config:
  doseResponseFile:
    type: File
    default: ../../output/pharmacodb/dr_reduce.curveReduce.dose_response_curve.json.gz
  profiles:
    type: File
    default: ../../output/pharmacodb/profiles.tsv.gz
  schema:
    type: Dir
    default: ../../src/bmeg/bmeg-dictionary/gdcdictionary/schemas/
  experiments:
    type: File
    default: ../../output/pharmacodb/experiments.tsv.gz
  drugs:
    type: File
    default: ../../output/pharmacodb/drugs.tsv.gz
  datasets:
    type: File
    default: ../../output/pharmacodb/datasets.tsv.gz
  cells:
    type: File
    default: ../../output/pharmacodb/cells.tsv.gz
  cellNames:
    type: File
    default: ../../source/ccle/cellline_id_lookup.tsv

inputs:
  profileReader:
    tableLoad:
      input: "{{config.profiles}}"


pipelines:

  profileProcess:
    - from: profileReader
    - lookup:
        json:
          input: "{{config.doseResponseFile}}"
          key: experiment_id
        lookup: "{{row.experiment_id}}"
        copy:
          curve: curve
    - lookup:
        tsv:
          input: "{{config.experiments}}"
          sep: "\t"
          key: experiment_id
        lookup: "{{row.experiment_id}}"
        copy:
          cell_id: cell_id
          drug_id: drug_id
          dataset_id: dataset_id
    - lookup:
        tsv:
          input: "{{config.drugs}}"
          sep: "\t"
          key: drug_id
        lookup: "{{row.drug_id}}"
        copy:
          drug_name: drug_name
    - lookup:
        tsv:
          input: "{{config.datasets}}"
          sep: "\t"
          key: dataset_id
        lookup: "{{row.dataset_id}}"
        copy:
          dataset_name: dataset_name
    #- tableReplace:
    #    field: dataset_name
    #    table:
    #      CCLE: CCLE-NP
    - lookup:
        tsv:
          input: "{{config.cells}}"
          sep: "\t"
          key: cell_id
        lookup: "{{row.cell_id}}"
        copy:
          cell_alias: cell_name
          tissue_id: tissue_id
    - lookup:
        tsv:
          input: "{{config.cellNames}}"
          sep: "\t"
          header: [name, id]
          key: name
        lookup: "{{row.cell_alias}}"
        copy:
          cell_name: id
    - project:
        mapping:
          submitter_id: "{{row.dataset_name}}:{{row.cell_name}}:{{row.drug_name}}"
          aac: "{{row.AAC}}"
          dss1: "{{row.DSS1}}"
          dss2: "{{row.DSS2}}"
          dss3: "{{row.DSS3}}"
          ic50: "{{row.IC50}}"
          ec50: "{{row.EC50}}"
          einf: "{{row.Einf}}"
          hs: "{{row.hs}}"
          compounds: [ "{{row.drug_name}}" ]
          aliquot: "{{row.dataset_name}}:{{row.cell_name}}"
    - fieldType:
        acc: float
        dss1: float
        dss2: float
        dss3: float
        ic50: float
        ec50: float
        einf: float
        hs: float
    - map:
        method: response
        gpython: |
          def response(x):
            s = sorted(x["curve"].items(), key=lambda x:float(x[0]))
            x['dose_um'] = []
            x['response'] = []
            for d, r in s:
              try:
                dn = float(d)
                rn = float(r)
                x['dose_um'].append(dn)
                x['response'].append(rn)
              except ValueError:
                pass
            return x

  cellDistinct:
    - from: profileProcess
    - distinct:
        value: "{{row.dataset_name}}:{{row.cell_name}}"
    - emit:
        name: checkpoint

  drObject:
    - from: profileProcess
    - project:
        mapping:
          project_id: "Project:{{row.dataset_name}}"
    - objectCreate:
        class: drug_response
        #name: "{{row.dataset_name}}"
        schema: "{{config.schema}}"
    - emit:
        name: drug_response

  cellCase:
    - from: cellDistinct
    - project:
        mapping:
          submitter_id: "{{row.dataset_name}}:{{row.cell_name}}"
          case_id: "Case:{{row.dataset_name}}:{{row.cell_name}}"
          project_id: "Project:{{row.dataset_name}}"
          projects: [ "Project:{{row.dataset_name}}" ]
    - clean:
        fields: ["case_id", "project_id", "submitter_id", "projects", "dataset_name"]
    - objectCreate:
        class: case
        schema: "{{config.schema}}"
    - emit:
        name: case

  cellSample:
    - from: cellDistinct
    - project:
        mapping:
          submitter_id: "{{row.dataset_name}}:{{row.cell_name}}"
          case: "Case:{{row.dataset_name}}:{{row.cell_name}}"
          sample_id: "Sample:{{row.dataset_name}}:{{row.cell_name}}"
          project_id: "Project:{{row.dataset_name}}"
    - clean:
        fields: ["case", "sample_id", "project_id", "submitter_id", "dataset_name"]
    - objectCreate:
        class: sample
        schema: "{{config.schema}}"
    - emit:
        name: sample

  cellAliquot:
    - from: cellDistinct
    - project:
        mapping:
          submitter_id: "{{row.dataset_name}}:{{row.cell_name}}"
          sample: "Sample:{{row.dataset_name}}:{{row.cell_name}}"
          aliquot_id: "Aliquot:{{row.dataset_name}}:{{row.cell_name}}"
          project_id: "Project:{{row.dataset_name}}"
    - clean:
        fields: ["sample", "aliquot_id", "project_id", "submitter_id", "dataset_name"]
    - objectCreate:
        class: aliquot
        schema: "{{config.schema}}"
    - emit:
        name: aliquot

  cellProject:
    - from: cellDistinct
    - reduce:
        field: dataset_name
        method: merge
        init: { "compounds" : [] }
        gpython: |

          def merge(x,y):
            #x["dataset_name"] = y["dataset_name"]
            x["compounds"] = list(set(y["compounds"]+x["compounds"]))
            return x
    - project:
        mapping:
          submitter_id: "{{row.dataset_name}}"
          project_id: "Project:{{row.dataset_name}}"
    - clean:
        fields: ["compounds", "project_id", "submitter_id", "dataset_name"]
    - objectCreate:
        class: project
        schema: "{{config.schema}}"
    - emit:
        name: project
