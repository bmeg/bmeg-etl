
class: sifter

outdir: ../../output/pharmacodb/
name: pharmacodb_profiles

config:
  doseResponseFile: ../../source/pharmacodb/tables/dr_reduce.curveReduce.dose_response_curve.json.gz
  profiles: ../../source/pharmacodb/tables/profiles.tsv.gz
  experiments: ../../source/pharmacodb/tables/experiments.tsv.gz
  drugs: ../../source/pharmacodb/tables/drugs.tsv.gz
  datasets: ../../source/pharmacodb/tables/datasets.tsv.gz
  cells: ../../source/pharmacodb/tables/cells.tsv.gz
  schema: ../../schema/

inputs:
  profileReader:
    tableLoad:
      input: "{{config.profiles}}"


pipelines:

  profileProcess:
    - from: profileReader
    - lookup:
        json:
          input: "{{config.doseResponseFile}}"
          key: experiment_id
        lookup: "{{row.experiment_id}}"
        copy:
          curve: curve
    - lookup:
        tsv:
          input: "{{config.experiments}}"
          sep: "\t"
          key: experiment_id
        lookup: "{{row.experiment_id}}"
        copy:
          cell_id: cell_id
          drug_id: drug_id
          dataset_id: dataset_id
    - lookup:
        tsv:
          input: "{{config.drugs}}"
          sep: "\t"
          key: drug_id
        lookup: "{{row.drug_id}}"
        copy:
          drug_name: drug_name
    - lookup:
        tsv:
          input: "{{config.datasets}}"
          sep: "\t"
          key: dataset_id
        lookup: "{{row.dataset_id}}"
        copy:
          dataset_name: dataset_name
    #- tableReplace:
    #    field: dataset_name
    #    table:
    #      CCLE: CCLE-NP
    - lookup:
        tsv:
          input: "{{config.cells}}"
          sep: "\t"
          key: cell_id
        lookup: "{{row.cell_id}}"
        copy:
          cell_alias: cell_name
          tissue_id: tissue_id
    - project:
        mapping:
          cell_name: "pharmacodb:{{row.cell_alias}}"
    #- lookup:
    #    tsv:
    #      input: "{{config.cellNames}}"
    #      sep: "\t"
    #      header: [name, id]
    #      key: name
    #    lookup: "{{row.cell_alias}}"
    #    copy:
    #      cell_name: id
    - project:
        mapping:
          submitter_id: "{{row.dataset_name}}:{{row.cell_name}}:{{row.drug_name}}"
          compounds: [ { "id" : "{{row.drug_name}}" } ]
          aliquot: "{{row.dataset_name}}:{{row.cell_name}}"
        rename:
          ACC: acc
          DSS1: dss1
          DSS2: dss2
          DSS3: dss3
          IC50: ic50
          EC50: ec50
          Einf: einf

    - fieldType:
        acc: float
        dss1: float
        dss2: float
        dss3: float
        ic50: float
        ec50: float
        einf: float
        hs: float
    - map:
        method: response
        gpython: |
          def response(x):
            s = sorted(x["curve"].items(), key=lambda x:float(x[0]))
            x['dose_um'] = []
            x['response'] = []
            for d, r in s:
              try:
                dn = float(d)
                rn = float(r)
                x['dose_um'].append(dn)
                x['response'].append(rn)
              except ValueError:
                pass
            return x

  cellDistinct:
    - from: profileProcess
    - distinct:
        value: "{{row.dataset_name}}:{{row.cell_name}}"
    - emit:
        name: checkpoint

  drObject:
    - from: profileProcess
    - project:
        mapping:
          id: "drugResponse/{{row.dataset_name}}:{{row.cell_name}}"
          project_id: "project/{{row.dataset_name}}"
          aliquot: [ {"id" : "aliquot/{{row.aliquot}}"} ]
    - objectValidate:
        title: DrugResponse
        schema: "{{config.schema}}"
    - emit:
        name: drug_response

  cellCase:
    - from: cellDistinct
    - project:
        mapping:
          id: "case/{{row.dataset_name}}:{{row.cell_name}}"
          submitter_id: "{{row.dataset_name}}:{{row.cell_name}}"
          case_id: "case/{{row.dataset_name}}:{{row.cell_name}}"
          project_id: "project/{{row.dataset_name}}"
          projects: [ { "id" : "project/{{row.dataset_name}}" } ]
    - clean:
        fields: ["id", "case_id", "project_id", "submitter_id", "projects", "dataset_name"]
    - objectValidate:
        title: Case
        schema: "{{config.schema}}"
    - emit:
        name: case

  cellSample:
    - from: cellDistinct
    - project:
        mapping:
          id: "sample/{{row.dataset_name}}:{{row.cell_name}}"
          submitter_id: "{{row.dataset_name}}:{{row.cell_name}}"
          case: [ { "id" : "case/{{row.dataset_name}}:{{row.cell_name}}" } ]
          sample_id: "sample/{{row.dataset_name}}:{{row.cell_name}}"
          project_id: "project/{{row.dataset_name}}"
    - clean:
        fields: ["id", "case", "sample_id", "project_id", "submitter_id", "dataset_name"]
    - objectValidate:
        title: Sample
        schema: "{{config.schema}}"
    - emit:
        name: sample

  cellAliquot:
    - from: cellDistinct
    - project:
        mapping:
          id: "aliquot/{{row.dataset_name}}:{{row.cell_name}}"
          submitter_id: "{{row.dataset_name}}:{{row.cell_name}}"
          sample: [ { "id" : "sample/{{row.dataset_name}}:{{row.cell_name}}" } ]
          aliquot_id: "aliquot/{{row.dataset_name}}:{{row.cell_name}}"
          project_id: "project/{{row.dataset_name}}"
    - clean:
        fields: ["id", "sample", "aliquot_id", "project_id", "submitter_id", "dataset_name"]
    - objectValidate:
        title: Aliquot
        schema: "{{config.schema}}"
    - emit:
        name: aliquot

  cellProject:
    - from: cellDistinct
    - reduce:
        field: dataset_name
        method: merge
        init: { "compounds" : [] }
        gpython: |

          def merge(x,y):
            #x["dataset_name"] = y["dataset_name"]
            x["compounds"] = y["compounds"]+x["compounds"]
            return x
    # distinct compound dicts
    - map:
        method: fix
        gpython: |

          def fix(row):
            s = []
            for i in row["compounds"]:
              s.append(i["id"])
            row["compounds"] = list( {"id" : i } for i in set(s))
            return row

    - project:
        mapping:
          submitter_id: "{{row.dataset_name}}"
          project_id: "project/{{row.dataset_name}}"
          id: "project/{{row.dataset_name}}"
    - clean:
        fields: ["id", "compounds", "project_id", "submitter_id", "dataset_name"]
    - objectValidate:
        title: Project
        schema: "{{config.schema}}"
    - emit:
        name: project
