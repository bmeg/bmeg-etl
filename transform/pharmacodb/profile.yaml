
class: sifter

outdir: ../../output/pharmacodb/
name: pharmacodb_profiles_gx

config:
  treatmentResponseFile: ../../tables/pharmacodb_profiles.tsv
  treatmentDoseFile: ../../tables/pharmacodb_profiles.tsv.dose.tsv
  treatmentViabilityFile: ../../tables/pharmacodb_profiles.tsv.viability.tsv
  doseViabilityFile: ../../tables/pharmacodb_profiles.tsv.DV.tsv
  schema: ../../schema/

inputs:
  profileReader:
    tableLoad:
      input: "{{config.treatmentResponseFile}}"
      sep: "\t"

 # doseReader:
 #   tableLoad:
 #     input: "{{config.treatmentDoseFile}}"
 #     sep: "\t"

 # viabilityReader:
 #   tableLoad:
 #     input: "{{config.treatmentViabilityFile}}"
 #     sep: "\t"
  DVReader:
    tableLoad:
      input: "{{config.doseViabilityFile}}"
      sep: "\t"

pipelines:

  dvPrep:
    - from: DVReader
    - map:
        method: dictFromTable
        gpython: |
          def dictFromTable(row):
            newRow = {
              "responseID": row["responseID"],
              "doses": {},
              "viabilities": {}
            }
            for key in row:
              if key[0] == "D":
                newRow["doses"][key[1:]] = row[key]
              elif key[0] == "V":
                newRow["viabilities"][key[1:]] = row[key]
            return newRow

#  dosePrep:
#    - from: doseReader
#    - map:
#        method: listFromTable
#        gpython: |
#          def listFromTable(row):
#            newRow = {
#              "responseID": row["responseID"],
#              "doses": row
#              }
#            return newRow
#    
#  viabilityPrep:
#    - from: viabilityReader 
#    - map:
#        method: listFromTable
#        gpython: |
#          def listFromTable(row):
#            newRow = {
#              "responseID": row["responseID"],
#              "viabilities": row
#              }
#            return newRow

  transform:
    - from: profileReader
#    - lookup:
#        pipeline:
#          from: dosePrep
#          key: responseID
#        lookup: "{{row.responseID}}"
#        copy:
#          dose: doses
#    - lookup:
#        pipeline: 
#          from: viabilityPrep
#          key: responseID
#        lookup: "{{row.responseID}}"
#        copy:
#          response: viabilities
    - lookup:
        pipeline:
          from: dvPrep
          key: responseID
        lookup: "{{row.responseID}}"
        copy:
          dose: doses
          response: viabilities
    - map:
        method: cleanDoseViability
        gpython: |
          def cleanDoseViability(row):
            dosePairs = []
            newDose = []
            newResponse = []
            for dose in row["dose"]:
              try:
                nd = float(row["dose"][dose])
              except:
                continue
              else:
                dosePairs.append((nd, float(row["response"][dose])))
            dosePairs.sort(key=lambda pair: pair[0])
            pairs = list(zip(*dosePairs))
            row["dose_um"] = list(pairs[0])
            row["response"] = list(pairs[1])

            #find the profile measurements and make sure to grab the right ones
            responseMetrics = []
            for field in row:
              if field[0:12] == "profileInfo_":
                responseMetrics.append(field)
            recompute = []
            for field in responseMetrics:
              if row[field]:
                if field[-10:] == "RECOMPUTED":
                  recompute.append(field)
                else:
                  id = field[12:15]
                  if id == "IC5":
                    row["ic50"] = float(row[field])
                  elif id == "EC5":
                    row["ec50"] = float(row[field])
                  elif id == "AAC":
                    row["aac"] = float(row[field])
                  elif id == "AUC":
                    row["auc"] = float(row[field])
                  elif id == "EIN" or id == "E_I" or id == "EMA":
                    row["einf"] = float(row[field])
                  elif id[:2] == "HS" or id == "SLO":
                    row["hs"] = float(row[field])
            for field in recompute:
              id = field[12:15]
              if id == "IC5":
                row["ic50"] = float(row[field])
              elif id == "EC5":
                row["ec50"] = float(row[field])
              elif id == "AAC":
                row["aac"] = float(row[field])
              elif id == "AUC":
                row["auc"] = float(row[field])
              elif id == "EIN" or id == "E_I" or id == "EMA":
                row["einf"] = float(row[field])
              elif id[:2] == "HS" or id == "SLO":
                row["hs"] = float(row[field])
            
            if "Cellosaurus.Accession.id" in row:
              row["case"] = {"id": row["Cellosaurus.Accession.id"]}
            if "depmap_id" in row:
              row["case"] = {"id": row["depmap_id"]}            
            if not ("projecttreatmentid" in row):
              row["projecttreatmentid"] = row["treatmentid"]
            project = row["project"].split("_")[0]
            row["id"] = "drugResponse/" + project + ":pharmacodb:" + row["sampleid"] + ":" + row["treatmentid"]
            row["project_id"] = "project/" + project
            row["submitter_id"] = row["experimentID"]
            row["compounds"] = {"id": row['projecttreatmentid']}
            row["aliquot"] = {"id": "aliquot/" + project + ":pharmacodb:" + row["sampleid"]}
            row["aliquotSubID"] = project + ":pharmacodb:" + row["sampleid"]
            row["sample"] = {"id": "sample/" + project + ":pharmacodb:" + row["sampleid"]}
            return row

  drugResponse:
    - from: transform
    - objectValidate:
        title: DrugResponse
        schema: "{{config.schema}}"
    - emit:
        name: drug_response
  aliquot:
    - from: transform
    - project:
        mapping:
          id: "{{row.aliquot.id}}"
          submitter_id: "{{row.aliquotSubID}}"
    - distinct:
        value: "{{row.id}}"
    - objectValidate:
        title: Aliquot
        schema: "{{config.schema}}"
    - emit:
        name: aliquot
  sample:
    - from: transform
    - project:
        mapping:
          id: "{{row.sample.id}}"
          submitter_id: "{{row.aliquotSubID}}"
    - distinct:
        value: "{{row.id}}"
    - objectValidate:
        title: Sample
        schema: "{{config.schema}}"
    - emit:
        name: sample

    
