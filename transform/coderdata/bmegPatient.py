# generated by datamodel-codegen:
#   filename:  Patient.yaml
#   timestamp: 2024-04-18T19:32:16+00:00

from __future__ import annotations

from datetime import date, time
from typing import Any, Dict, List, Optional, Union
from uuid import UUID

from pydantic import (
    AnyUrl,
    AwareDatetime,
    BaseModel,
    ConfigDict,
    Field,
    PositiveInt,
    conint,
    constr,
)
from typing_extensions import Literal


class Link(BaseModel):
    anchor: Optional[str] = None
    anchorPointer: Optional[str] = None
    rel: Union[str, List[str]]
    href: str
    hrefSchema: Optional[Any] = False
    templatePointers: Optional[Dict[str, str]] = None
    templateRequired: Optional[List[str]] = None
    title: Optional[str] = None
    description: Optional[str] = None
    targetSchema: Optional[Any] = True
    targetMediaType: Optional[str] = None
    targetHints: Optional[Any] = None
    headerSchema: Optional[Any] = True
    submissionMediaType: Optional[str] = 'application/json'
    submissionSchema: Optional[Any] = True
    field_comment: Optional[str] = Field(None, alias='$comment')


class Patient(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    field_active: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_active', title='Extension field for ``active``.'
    )
    field_birthDate: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_birthDate', title='Extension field for ``birthDate``.'
    )
    field_deceasedBoolean: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_deceasedBoolean', title='Extension field for ``deceasedBoolean``.'
    )
    field_deceasedDateTime: Optional[FHIRPrimitiveExtension] = Field(
        None,
        alias='_deceasedDateTime',
        title='Extension field for ``deceasedDateTime``.',
    )
    field_gender: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_gender', title='Extension field for ``gender``.'
    )
    field_implicitRules: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_implicitRules', title='Extension field for ``implicitRules``.'
    )
    field_language: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_language', title='Extension field for ``language``.'
    )
    field_multipleBirthBoolean: Optional[FHIRPrimitiveExtension] = Field(
        None,
        alias='_multipleBirthBoolean',
        title='Extension field for ``multipleBirthBoolean``.',
    )
    field_multipleBirthInteger: Optional[FHIRPrimitiveExtension] = Field(
        None,
        alias='_multipleBirthInteger',
        title='Extension field for ``multipleBirthInteger``.',
    )
    active: Optional[bool] = Field(
        None,
        description="Whether this patient record is in active use.  Many systems use this property to mark as non-current patients, such as those that have not been seen for a period of time based on an organization's business rules.  It is often used to filter patient lists to exclude inactive patients  Deceased patients may also be marked as inactive for the same reasons, but may be active for some time after death.",
        title="Whether this patient's record is in active use",
    )
    address: Optional[List[Address]] = Field(
        None, title='An address for the individual'
    )
    birthDate: Optional[date] = Field(
        None, title='The date of birth for the individual'
    )
    communication: Optional[List[PatientCommunication]] = Field(
        None,
        title='A language which may be used to communicate with the patient about his or her health',
    )
    contact: Optional[List[PatientContact]] = Field(
        None, title='A contact party (e.g. guardian, partner, friend) for the patient'
    )
    contained: Optional[List[Resource]] = Field(
        None,
        description='These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.',
        title='Contained, inline Resources',
    )
    deceasedBoolean: Optional[bool] = Field(
        None, title='Indicates if the individual is deceased or not'
    )
    deceasedDateTime: Optional[AwareDatetime] = Field(
        None, title='Indicates if the individual is deceased or not'
    )
    extension: Optional[List[Extension]] = Field(
        None,
        description='May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.',
        title='Additional content defined by implementations',
    )
    fhir_comments: Optional[Union[str, List[str]]] = Field(None, title='Fhir Comments')
    gender: Optional[constr(pattern=r'^[^\s]+(\s[^\s]+)*$')] = Field(
        None,
        description='Administrative Gender - the gender that the patient is considered to have for administration and record keeping purposes.',
        title='male | female | other | unknown',
    )
    generalPractitioner: Optional[List[Reference]] = Field(
        None,
        description="Patient's nominated care provider.",
        title="Patient's nominated primary care provider",
    )
    id: Optional[
        constr(pattern=r'^[A-Za-z0-9\-.]+$', min_length=1, max_length=64)
    ] = Field(
        None,
        description='The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.',
        title='Logical id of this artifact',
    )
    identifier: Optional[List[Identifier]] = Field(
        None, title='An identifier for this patient'
    )
    implicitRules: Optional[constr(pattern=r'\S*')] = Field(
        None,
        description='A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.',
        title='A set of rules under which this content was created',
    )
    language: Optional[constr(pattern=r'^[^\s]+(\s[^\s]+)*$')] = Field(
        None,
        description='The base language in which the resource is written.',
        title='Language of the resource content',
    )
    link: Optional[List[PatientLink]] = Field(
        None,
        title='Link to a Patient or RelatedPerson resource that concerns the same actual individual',
    )
    links: Optional[List[Link]] = None
    managingOrganization: Optional[Reference] = Field(
        None, title='Organization that is the custodian of the patient record'
    )
    maritalStatus: Optional[CodeableConcept] = Field(
        None,
        description="This field contains a patient's most recent marital (civil) status.",
        title='Marital (civil) status of a patient',
    )
    meta: Optional[Meta] = Field(
        None,
        description='The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.',
        title='Metadata about the resource',
    )
    modifierExtension: Optional[List[Extension]] = Field(
        None,
        description="May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
        title='Extensions that cannot be ignored',
    )
    multipleBirthBoolean: Optional[bool] = Field(
        None,
        description='Indicates whether the patient is part of a multiple (boolean) or indicates the actual birth order (integer).',
        title='Whether patient is part of a multiple birth',
    )
    multipleBirthInteger: Optional[int] = Field(
        None,
        description='Indicates whether the patient is part of a multiple (boolean) or indicates the actual birth order (integer).',
        title='Whether patient is part of a multiple birth',
    )
    name: Optional[List[HumanName]] = Field(
        None,
        description='A name associated with the individual.',
        title='A name associated with the patient',
    )
    photo: Optional[List[Attachment]] = Field(None, title='Image of the patient')
    resourceType: Literal['Patient'] = Field(
        'Patient',
        description='One of the resource types defined as part of FHIR',
        title='Resource Type',
    )
    substances: Optional[List[Substance]] = None
    telecom: Optional[List[ContactPoint]] = Field(
        None,
        description='A contact detail (e.g. a telephone number or an email address) by which the individual may be contacted.',
        title='A contact detail for the individual',
    )
    text: Optional[Narrative] = Field(
        None,
        description='A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.',
        title='Text summary of the resource, for human interpretation',
    )


class FHIRPrimitiveExtension(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    extension: Optional[List[Extension]] = Field(
        None,
        description='Additional content defined by implementations',
        title='List of `Extension` items (represented as `dict` in JSON)',
    )
    fhir_comments: Optional[Union[str, List[str]]] = Field(None, title='Fhir Comments')
    id: Optional[constr(pattern=r'[ \r\n\t\S]+')] = Field(
        None,
        description='Unique id for inter-element referencing',
        title='Type `String`',
    )
    links: Optional[List[Link]] = None
    resourceType: Literal['FHIRPrimitiveExtension'] = Field(
        'FHIRPrimitiveExtension',
        description='One of the resource types defined as part of FHIR',
        title='Resource Type',
    )


class Extension(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    extension: Optional[List[Extension]] = Field(
        None,
        description='May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.',
        title='Additional content defined by implementations',
    )
    fhir_comments: Optional[Union[str, List[str]]] = Field(None, title='Fhir Comments')
    id: Optional[constr(pattern=r'[ \r\n\t\S]+')] = Field(
        None,
        description='Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.',
        title='Unique id for inter-element referencing',
    )
    links: Optional[List[Link]] = None
    resourceType: Literal['Extension'] = Field(
        'Extension',
        description='One of the resource types defined as part of FHIR',
        title='Resource Type',
    )
    url: Optional[constr(pattern=r'\S*')] = Field(
        None,
        description='Source of the definition for the extension code - a logical name or a URL.',
        title='identifies the meaning of the extension',
    )
    valueAddress: Optional[Address] = Field(
        None,
        description='Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).',
        title='Value of extension',
    )
    valueAge: Optional[Age] = Field(
        None,
        description='Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).',
        title='Value of extension',
    )
    valueAnnotation: Optional[Annotation] = Field(
        None,
        description='Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).',
        title='Value of extension',
    )
    valueAttachment: Optional[Attachment] = Field(
        None,
        description='Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).',
        title='Value of extension',
    )
    valueAvailability: Optional[Availability] = Field(
        None,
        description='Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).',
        title='Value of extension',
    )
    valueBase64Binary: Optional[bytes] = Field(
        None,
        description='Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).',
        title='Value of extension',
    )
    valueBoolean: Optional[bool] = Field(
        None,
        description='Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).',
        title='Value of extension',
    )
    valueCanonical: Optional[constr(pattern=r'\S*')] = Field(
        None,
        description='Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).',
        title='Value of extension',
    )
    valueCode: Optional[constr(pattern=r'^[^\s]+(\s[^\s]+)*$')] = Field(
        None,
        description='Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).',
        title='Value of extension',
    )
    valueCodeableConcept: Optional[CodeableConcept] = Field(
        None,
        description='Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).',
        title='Value of extension',
    )
    valueCodeableReference: Optional[CodeableReference] = Field(
        None,
        description='Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).',
        title='Value of extension',
    )
    valueCoding: Optional[Coding] = Field(
        None,
        description='Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).',
        title='Value of extension',
    )
    valueContactDetail: Optional[ContactDetail] = Field(
        None,
        description='Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).',
        title='Value of extension',
    )
    valueContactPoint: Optional[ContactPoint] = Field(
        None,
        description='Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).',
        title='Value of extension',
    )
    valueCount: Optional[Count] = Field(
        None,
        description='Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).',
        title='Value of extension',
    )
    valueDataRequirement: Optional[DataRequirement] = Field(
        None,
        description='Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).',
        title='Value of extension',
    )
    valueDate: Optional[date] = Field(
        None,
        description='Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).',
        title='Value of extension',
    )
    valueDateTime: Optional[AwareDatetime] = Field(
        None,
        description='Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).',
        title='Value of extension',
    )
    valueDecimal: Optional[float] = Field(
        None,
        description='Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).',
        title='Value of extension',
    )
    valueDistance: Optional[Distance] = Field(
        None,
        description='Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).',
        title='Value of extension',
    )
    valueDosage: Optional[Dosage] = Field(
        None,
        description='Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).',
        title='Value of extension',
    )
    valueDuration: Optional[Duration] = Field(
        None,
        description='Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).',
        title='Value of extension',
    )
    valueExpression: Optional[Expression] = Field(
        None,
        description='Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).',
        title='Value of extension',
    )
    valueExtendedContactDetail: Optional[ExtendedContactDetail] = Field(
        None,
        description='Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).',
        title='Value of extension',
    )
    valueHumanName: Optional[HumanName] = Field(
        None,
        description='Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).',
        title='Value of extension',
    )
    valueId: Optional[
        constr(pattern=r'^[A-Za-z0-9\-.]+$', min_length=1, max_length=64)
    ] = Field(
        None,
        description='Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).',
        title='Value of extension',
    )
    valueIdentifier: Optional[Identifier] = Field(
        None,
        description='Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).',
        title='Value of extension',
    )
    valueInstant: Optional[AwareDatetime] = Field(
        None,
        description='Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).',
        title='Value of extension',
    )
    valueInteger: Optional[int] = Field(
        None,
        description='Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).',
        title='Value of extension',
    )
    valueInteger64: Optional[int] = Field(
        None,
        description='Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).',
        title='Value of extension',
    )
    valueMarkdown: Optional[constr(pattern=r'\s*(\S|\s)*')] = Field(
        None,
        description='Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).',
        title='Value of extension',
    )
    valueMeta: Optional[Meta] = Field(
        None,
        description='Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).',
        title='Value of extension',
    )
    valueMoney: Optional[Money] = Field(
        None,
        description='Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).',
        title='Value of extension',
    )
    valueOid: Optional[constr(pattern=r'^urn:oid:[0-2](\.(0|[1-9][0-9]*))+$')] = Field(
        None,
        description='Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).',
        title='Value of extension',
    )
    valueParameterDefinition: Optional[ParameterDefinition] = Field(
        None,
        description='Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).',
        title='Value of extension',
    )
    valuePeriod: Optional[Period] = Field(
        None,
        description='Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).',
        title='Value of extension',
    )
    valuePositiveInt: Optional[PositiveInt] = Field(
        None,
        description='Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).',
        title='Value of extension',
    )
    valueQuantity: Optional[Quantity] = Field(
        None,
        description='Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).',
        title='Value of extension',
    )
    valueRange: Optional[Range] = Field(
        None,
        description='Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).',
        title='Value of extension',
    )
    valueRatio: Optional[Ratio] = Field(
        None,
        description='Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).',
        title='Value of extension',
    )
    valueRatioRange: Optional[RatioRange] = Field(
        None,
        description='Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).',
        title='Value of extension',
    )
    valueReference: Optional[Reference] = Field(
        None,
        description='Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).',
        title='Value of extension',
    )
    valueRelatedArtifact: Optional[RelatedArtifact] = Field(
        None,
        description='Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).',
        title='Value of extension',
    )
    valueSampledData: Optional[SampledData] = Field(
        None,
        description='Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).',
        title='Value of extension',
    )
    valueSignature: Optional[Signature] = Field(
        None,
        description='Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).',
        title='Value of extension',
    )
    valueString: Optional[constr(pattern=r'[ \r\n\t\S]+')] = Field(
        None,
        description='Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).',
        title='Value of extension',
    )
    valueTime: Optional[time] = Field(
        None,
        description='Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).',
        title='Value of extension',
    )
    valueTiming: Optional[Timing] = Field(
        None,
        description='Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).',
        title='Value of extension',
    )
    valueTriggerDefinition: Optional[TriggerDefinition] = Field(
        None,
        description='Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).',
        title='Value of extension',
    )
    valueUnsignedInt: Optional[conint(ge=0)] = Field(
        None,
        description='Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).',
        title='Value of extension',
    )
    valueUri: Optional[constr(pattern=r'\S*')] = Field(
        None,
        description='Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).',
        title='Value of extension',
    )
    valueUrl: Optional[AnyUrl] = Field(
        None,
        description='Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).',
        title='Value of extension',
    )
    valueUsageContext: Optional[UsageContext] = Field(
        None,
        description='Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).',
        title='Value of extension',
    )
    valueUuid: Optional[UUID] = Field(
        None,
        description='Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).',
        title='Value of extension',
    )


class Address(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    field_city: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_city', title='Extension field for ``city``.'
    )
    field_country: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_country', title='Extension field for ``country``.'
    )
    field_district: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_district', title='Extension field for ``district``.'
    )
    field_line: Optional[List[FHIRPrimitiveExtension]] = Field(
        None, alias='_line', title='Extension field for ``line``.'
    )
    field_postalCode: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_postalCode', title='Extension field for ``postalCode``.'
    )
    field_state: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_state', title='Extension field for ``state``.'
    )
    field_text: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_text', title='Extension field for ``text``.'
    )
    field_type: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_type', title='Extension field for ``type``.'
    )
    field_use: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_use', title='Extension field for ``use``.'
    )
    city: Optional[constr(pattern=r'[ \r\n\t\S]+')] = Field(
        None,
        description='The name of the city, town, suburb, village or other community or delivery center.',
        title='Name of city, town etc.',
    )
    country: Optional[constr(pattern=r'[ \r\n\t\S]+')] = Field(
        None,
        description='Country - a nation as commonly understood or generally accepted.',
        title='Country (e.g. may be ISO 3166 2 or 3 letter code)',
    )
    district: Optional[constr(pattern=r'[ \r\n\t\S]+')] = Field(
        None,
        description='The name of the administrative area (county).',
        title='District name (aka county)',
    )
    extension: Optional[List[Extension]] = Field(
        None,
        description='May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.',
        title='Additional content defined by implementations',
    )
    fhir_comments: Optional[Union[str, List[str]]] = Field(None, title='Fhir Comments')
    id: Optional[constr(pattern=r'[ \r\n\t\S]+')] = Field(
        None,
        description='Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.',
        title='Unique id for inter-element referencing',
    )
    line: Optional[List[constr(pattern=r'[ \r\n\t\S]+')]] = Field(
        None,
        description='This component contains the house number, apartment number, street name, street direction,  P.O. Box number, delivery hints, and similar address information.',
        title='Street name, number, direction & P.O. Box etc.',
    )
    links: Optional[List[Link]] = None
    period: Optional[Period] = Field(
        None, title='Time period when address was/is in use'
    )
    postalCode: Optional[constr(pattern=r'[ \r\n\t\S]+')] = Field(
        None,
        description='A postal code designating a region defined by the postal service.',
        title='Postal code for area',
    )
    resourceType: Literal['Address'] = Field(
        'Address',
        description='One of the resource types defined as part of FHIR',
        title='Resource Type',
    )
    state: Optional[constr(pattern=r'[ \r\n\t\S]+')] = Field(
        None,
        description='Sub-unit of a country with limited sovereignty in a federally organized country. A code may be used if codes are in common use (e.g. US 2 letter state codes).',
        title='Sub-unit of country (abbreviations ok)',
    )
    text: Optional[constr(pattern=r'[ \r\n\t\S]+')] = Field(
        None,
        description='Specifies the entire address as it should be displayed e.g. on a postal label. This may be provided instead of or as well as the specific parts.',
        title='Text representation of the address',
    )
    type: Optional[constr(pattern=r'^[^\s]+(\s[^\s]+)*$')] = Field(
        None,
        description='Distinguishes between physical addresses (those you can visit) and mailing addresses (e.g. PO Boxes and care-of addresses). Most addresses are both.',
        title='postal | physical | both',
    )
    use: Optional[constr(pattern=r'^[^\s]+(\s[^\s]+)*$')] = Field(
        None,
        description='The purpose of this address.',
        title='home | work | temp | old | billing - purpose of this address',
    )


class Period(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    field_end: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_end', title='Extension field for ``end``.'
    )
    field_start: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_start', title='Extension field for ``start``.'
    )
    end: Optional[AwareDatetime] = Field(
        None,
        description='The end of the period. If the end of the period is missing, it means no end was known or planned at the time the instance was created. The start may be in the past, and the end date in the future, which means that period is expected/planned to end at that time.',
        title='End time with inclusive boundary, if not ongoing',
    )
    extension: Optional[List[Extension]] = Field(
        None,
        description='May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.',
        title='Additional content defined by implementations',
    )
    fhir_comments: Optional[Union[str, List[str]]] = Field(None, title='Fhir Comments')
    id: Optional[constr(pattern=r'[ \r\n\t\S]+')] = Field(
        None,
        description='Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.',
        title='Unique id for inter-element referencing',
    )
    links: Optional[List[Link]] = None
    resourceType: Literal['Period'] = Field(
        'Period',
        description='One of the resource types defined as part of FHIR',
        title='Resource Type',
    )
    start: Optional[AwareDatetime] = Field(
        None,
        description='The start of the period. The boundary is inclusive.',
        title='Starting time with inclusive boundary',
    )


class Age(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    field_code: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_code', title='Extension field for ``code``.'
    )
    field_comparator: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_comparator', title='Extension field for ``comparator``.'
    )
    field_system: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_system', title='Extension field for ``system``.'
    )
    field_unit: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_unit', title='Extension field for ``unit``.'
    )
    field_value: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_value', title='Extension field for ``value``.'
    )
    code: Optional[constr(pattern=r'^[^\s]+(\s[^\s]+)*$')] = Field(
        None,
        description='A computer processable form of the unit in some unit representation system.',
        title='Coded form of the unit',
    )
    comparator: Optional[constr(pattern=r'^[^\s]+(\s[^\s]+)*$')] = Field(
        None,
        description='How the value should be understood and represented - whether the actual value is greater or less than the stated value due to measurement issues; e.g. if the comparator is "<" , then the real value is < stated value.',
        title='< | <= | >= | > | ad - how to understand the value',
    )
    extension: Optional[List[Extension]] = Field(
        None,
        description='May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.',
        title='Additional content defined by implementations',
    )
    fhir_comments: Optional[Union[str, List[str]]] = Field(None, title='Fhir Comments')
    id: Optional[constr(pattern=r'[ \r\n\t\S]+')] = Field(
        None,
        description='Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.',
        title='Unique id for inter-element referencing',
    )
    links: Optional[List[Link]] = None
    resourceType: Literal['Age'] = Field(
        'Age',
        description='One of the resource types defined as part of FHIR',
        title='Resource Type',
    )
    system: Optional[constr(pattern=r'\S*')] = Field(
        None,
        description='The identification of the system that provides the coded form of the unit.',
        title='System that defines coded unit form',
    )
    unit: Optional[constr(pattern=r'[ \r\n\t\S]+')] = Field(
        None,
        description='A human-readable form of the unit.',
        title='Unit representation',
    )
    value: Optional[float] = Field(
        None,
        description='The value of the measured amount. The value includes an implicit precision in the presentation of the value.',
        title='Numerical value (with implicit precision)',
    )


class Annotation(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    field_authorString: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_authorString', title='Extension field for ``authorString``.'
    )
    field_text: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_text', title='Extension field for ``text``.'
    )
    field_time: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_time', title='Extension field for ``time``.'
    )
    authorReference: Optional[Reference] = Field(
        None,
        description='The individual responsible for making the annotation.',
        title='Individual responsible for the annotation',
    )
    authorString: Optional[constr(pattern=r'[ \r\n\t\S]+')] = Field(
        None,
        description='The individual responsible for making the annotation.',
        title='Individual responsible for the annotation',
    )
    extension: Optional[List[Extension]] = Field(
        None,
        description='May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.',
        title='Additional content defined by implementations',
    )
    fhir_comments: Optional[Union[str, List[str]]] = Field(None, title='Fhir Comments')
    id: Optional[constr(pattern=r'[ \r\n\t\S]+')] = Field(
        None,
        description='Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.',
        title='Unique id for inter-element referencing',
    )
    links: Optional[List[Link]] = None
    resourceType: Literal['Annotation'] = Field(
        'Annotation',
        description='One of the resource types defined as part of FHIR',
        title='Resource Type',
    )
    text: Optional[constr(pattern=r'\s*(\S|\s)*')] = Field(
        None,
        description='The text of the annotation in markdown format.',
        title='The annotation  - text content (as markdown)',
    )
    time: Optional[AwareDatetime] = Field(
        None,
        description='Indicates when this particular annotation was made.',
        title='When the annotation was made',
    )


class Reference(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    field_display: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_display', title='Extension field for ``display``.'
    )
    field_reference: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_reference', title='Extension field for ``reference``.'
    )
    field_type: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_type', title='Extension field for ``type``.'
    )
    display: Optional[constr(pattern=r'[ \r\n\t\S]+')] = Field(
        None,
        description='Plain text narrative that identifies the resource in addition to the resource reference.',
        title='Text alternative for the resource',
    )
    extension: Optional[List[Extension]] = Field(
        None,
        description='May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.',
        title='Additional content defined by implementations',
    )
    fhir_comments: Optional[Union[str, List[str]]] = Field(None, title='Fhir Comments')
    id: Optional[constr(pattern=r'[ \r\n\t\S]+')] = Field(
        None,
        description='Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.',
        title='Unique id for inter-element referencing',
    )
    identifier: Optional[Identifier] = Field(
        None,
        description='An identifier for the target resource. This is used when there is no way to reference the other resource directly, either because the entity it represents is not available through a FHIR server, or because there is no way for the author of the resource to convert a known identifier to an actual location. There is no requirement that a Reference.identifier point to something that is actually exposed as a FHIR instance, but it SHALL point to a business concept that would be expected to be exposed as a FHIR instance, and that instance would need to be of a FHIR resource type allowed by the reference.',
        title='Logical reference, when literal reference is not known',
    )
    links: Optional[List[Link]] = None
    reference: Optional[constr(pattern=r'[ \r\n\t\S]+')] = Field(
        None,
        description="A reference to a location at which the other resource is found. The reference may be a relative reference, in which case it is relative to the service base URL, or an absolute URL that resolves to the location where the resource is found. The reference may be version specific or not. If the reference is not to a FHIR RESTful server, then it should be assumed to be version specific. Internal fragment references (start with '#') refer to contained resources.",
        title='Literal reference, Relative, internal or absolute URL',
    )
    resourceType: Literal['Reference'] = Field(
        'Reference',
        description='One of the resource types defined as part of FHIR',
        title='Resource Type',
    )
    type: Optional[constr(pattern=r'\S*')] = Field(
        None,
        description='The expected type of the target of the reference. If both Reference.type and Reference.reference are populated and Reference.reference is a FHIR URL, both SHALL be consistent.  The type is the Canonical URL of Resource Definition that is the type this reference refers to. References are URLs that are relative to http://hl7.org/fhir/StructureDefinition/ e.g. "Patient" is a reference to http://hl7.org/fhir/StructureDefinition/Patient. Absolute URLs are only allowed for logical models (and can only be used in references in logical models, not resources).',
        title='Type the reference refers to (e.g. "Patient") - must be a resource in resources',
    )


class Identifier(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    field_system: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_system', title='Extension field for ``system``.'
    )
    field_use: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_use', title='Extension field for ``use``.'
    )
    field_value: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_value', title='Extension field for ``value``.'
    )
    assigner: Optional[Reference] = Field(
        None,
        description='Organization that issued/manages the identifier.',
        title='Organization that issued id (may be just text)',
    )
    extension: Optional[List[Extension]] = Field(
        None,
        description='May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.',
        title='Additional content defined by implementations',
    )
    fhir_comments: Optional[Union[str, List[str]]] = Field(None, title='Fhir Comments')
    id: Optional[constr(pattern=r'[ \r\n\t\S]+')] = Field(
        None,
        description='Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.',
        title='Unique id for inter-element referencing',
    )
    links: Optional[List[Link]] = None
    period: Optional[Period] = Field(
        None,
        description='Time period during which identifier is/was valid for use.',
        title='Time period when id is/was valid for use',
    )
    resourceType: Literal['Identifier'] = Field(
        'Identifier',
        description='One of the resource types defined as part of FHIR',
        title='Resource Type',
    )
    system: Optional[constr(pattern=r'\S*')] = Field(
        None,
        description='Establishes the namespace for the value - that is, an absolute URL that describes a set values that are unique.',
        title='The namespace for the identifier value',
    )
    type: Optional[CodeableConcept] = Field(
        None,
        description='A coded type for the identifier that can be used to determine which identifier to use for a specific purpose.',
        title='Description of identifier',
    )
    use: Optional[constr(pattern=r'^[^\s]+(\s[^\s]+)*$')] = Field(
        None,
        description='The purpose of this identifier.',
        title='usual | official | temp | secondary | old (If known)',
    )
    value: Optional[constr(pattern=r'[ \r\n\t\S]+')] = Field(
        None,
        description='The portion of the identifier typically relevant to the user and which is unique within the context of the system.',
        title='The value that is unique',
    )


class CodeableConcept(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    field_text: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_text', title='Extension field for ``text``.'
    )
    coding: Optional[List[Coding]] = Field(
        None,
        description='A reference to a code defined by a terminology system.',
        title='Code defined by a terminology system',
    )
    extension: Optional[List[Extension]] = Field(
        None,
        description='May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.',
        title='Additional content defined by implementations',
    )
    fhir_comments: Optional[Union[str, List[str]]] = Field(None, title='Fhir Comments')
    id: Optional[constr(pattern=r'[ \r\n\t\S]+')] = Field(
        None,
        description='Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.',
        title='Unique id for inter-element referencing',
    )
    links: Optional[List[Link]] = None
    resourceType: Literal['CodeableConcept'] = Field(
        'CodeableConcept',
        description='One of the resource types defined as part of FHIR',
        title='Resource Type',
    )
    text: Optional[constr(pattern=r'[ \r\n\t\S]+')] = Field(
        None,
        description='A human language representation of the concept as seen/selected/uttered by the user who entered the data and/or which represents the intended meaning of the user.',
        title='Plain text representation of the concept',
    )


class Coding(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    field_code: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_code', title='Extension field for ``code``.'
    )
    field_display: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_display', title='Extension field for ``display``.'
    )
    field_system: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_system', title='Extension field for ``system``.'
    )
    field_userSelected: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_userSelected', title='Extension field for ``userSelected``.'
    )
    field_version: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_version', title='Extension field for ``version``.'
    )
    code: Optional[constr(pattern=r'^[^\s]+(\s[^\s]+)*$')] = Field(
        None,
        description='A symbol in syntax defined by the system. The symbol may be a predefined code or an expression in a syntax defined by the coding system (e.g. post-coordination).',
        title='Symbol in syntax defined by the system',
    )
    display: Optional[constr(pattern=r'[ \r\n\t\S]+')] = Field(
        None,
        description='A representation of the meaning of the code in the system, following the rules of the system.',
        title='Representation defined by the system',
    )
    extension: Optional[List[Extension]] = Field(
        None,
        description='May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.',
        title='Additional content defined by implementations',
    )
    fhir_comments: Optional[Union[str, List[str]]] = Field(None, title='Fhir Comments')
    id: Optional[constr(pattern=r'[ \r\n\t\S]+')] = Field(
        None,
        description='Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.',
        title='Unique id for inter-element referencing',
    )
    links: Optional[List[Link]] = None
    resourceType: Literal['Coding'] = Field(
        'Coding',
        description='One of the resource types defined as part of FHIR',
        title='Resource Type',
    )
    system: Optional[constr(pattern=r'\S*')] = Field(
        None,
        description='The identification of the code system that defines the meaning of the symbol in the code.',
        title='Identity of the terminology system',
    )
    userSelected: Optional[bool] = Field(
        None,
        description='Indicates that this coding was chosen by a user directly - e.g. off a pick list of available items (codes or displays).',
        title='If this coding was chosen directly by the user',
    )
    version: Optional[constr(pattern=r'[ \r\n\t\S]+')] = Field(
        None,
        description='The version of the code system which was used when choosing this code. Note that a well-maintained code system does not need the version reported, because the meaning of codes is consistent across versions. However this cannot consistently be assured, and when the meaning is not guaranteed to be consistent, the version SHOULD be exchanged.',
        title='Version of the system - if relevant',
    )


class Attachment(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    field_contentType: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_contentType', title='Extension field for ``contentType``.'
    )
    field_creation: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_creation', title='Extension field for ``creation``.'
    )
    field_data: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_data', title='Extension field for ``data``.'
    )
    field_duration: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_duration', title='Extension field for ``duration``.'
    )
    field_frames: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_frames', title='Extension field for ``frames``.'
    )
    field_hash: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_hash', title='Extension field for ``hash``.'
    )
    field_height: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_height', title='Extension field for ``height``.'
    )
    field_language: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_language', title='Extension field for ``language``.'
    )
    field_pages: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_pages', title='Extension field for ``pages``.'
    )
    field_size: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_size', title='Extension field for ``size``.'
    )
    field_title: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_title', title='Extension field for ``title``.'
    )
    field_url: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_url', title='Extension field for ``url``.'
    )
    field_width: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_width', title='Extension field for ``width``.'
    )
    contentType: Optional[constr(pattern=r'^[^\s]+(\s[^\s]+)*$')] = Field(
        None,
        description='Identifies the type of the data in the attachment and allows a method to be chosen to interpret or render the data. Includes mime type parameters such as charset where appropriate.',
        title='Mime type of the content, with charset etc.',
    )
    creation: Optional[AwareDatetime] = Field(
        None,
        description='The date that the attachment was first created.',
        title='Date attachment was first created',
    )
    data: Optional[bytes] = Field(
        None,
        description='The actual data of the attachment - a sequence of bytes, base64 encoded.',
        title='Data inline, base64ed',
    )
    duration: Optional[float] = Field(
        None,
        description='The duration of the recording in seconds - for audio and video.',
        title='Length in seconds (audio / video)',
    )
    extension: Optional[List[Extension]] = Field(
        None,
        description='May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.',
        title='Additional content defined by implementations',
    )
    fhir_comments: Optional[Union[str, List[str]]] = Field(None, title='Fhir Comments')
    frames: Optional[PositiveInt] = Field(
        None,
        description='The number of frames in a photo. This is used with a multi-page fax, or an imaging acquisition context that takes multiple slices in a single image, or an animated gif. If there is more than one frame, this SHALL have a value in order to alert interface software that a multi-frame capable rendering widget is required.',
        title='Number of frames if > 1 (photo)',
    )
    hash: Optional[bytes] = Field(
        None,
        description='The calculated hash of the data using SHA-1. Represented using base64.',
        title='Hash of the data (sha-1, base64ed)',
    )
    height: Optional[PositiveInt] = Field(
        None, title='Height of the image in pixels (photo/video)'
    )
    id: Optional[constr(pattern=r'[ \r\n\t\S]+')] = Field(
        None,
        description='Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.',
        title='Unique id for inter-element referencing',
    )
    language: Optional[constr(pattern=r'^[^\s]+(\s[^\s]+)*$')] = Field(
        None,
        description='The human language of the content. The value can be any valid value according to BCP 47.',
        title='Human language of the content (BCP-47)',
    )
    links: Optional[List[Link]] = None
    pages: Optional[PositiveInt] = Field(
        None,
        description='The number of pages when printed.',
        title='Number of printed pages',
    )
    resourceType: Literal['Attachment'] = Field(
        'Attachment',
        description='One of the resource types defined as part of FHIR',
        title='Resource Type',
    )
    size: Optional[int] = Field(
        None,
        description='The number of bytes of data that make up this attachment (before base64 encoding, if that is done).',
        title='Number of bytes of content (if url provided)',
    )
    title: Optional[constr(pattern=r'[ \r\n\t\S]+')] = Field(
        None,
        description='A label or set of text to display in place of the data.',
        title='Label to display in place of the data',
    )
    url: Optional[AnyUrl] = Field(
        None,
        description='A location where the data can be accessed.',
        title='Uri where the data can be found',
    )
    width: Optional[PositiveInt] = Field(
        None, title='Width of the image in pixels (photo/video)'
    )


class Availability(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    availableTime: Optional[List[AvailabilityAvailableTime]] = Field(
        None, title='Times the {item} is available'
    )
    extension: Optional[List[Extension]] = Field(
        None,
        description='May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.',
        title='Additional content defined by implementations',
    )
    fhir_comments: Optional[Union[str, List[str]]] = Field(None, title='Fhir Comments')
    id: Optional[constr(pattern=r'[ \r\n\t\S]+')] = Field(
        None,
        description='Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.',
        title='Unique id for inter-element referencing',
    )
    links: Optional[List[Link]] = None
    notAvailableTime: Optional[List[AvailabilityNotAvailableTime]] = Field(
        None, title='Not available during this time due to provided reason'
    )
    resourceType: Literal['Availability'] = Field(
        'Availability',
        description='One of the resource types defined as part of FHIR',
        title='Resource Type',
    )


class AvailabilityAvailableTime(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    field_allDay: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_allDay', title='Extension field for ``allDay``.'
    )
    field_availableEndTime: Optional[FHIRPrimitiveExtension] = Field(
        None,
        alias='_availableEndTime',
        title='Extension field for ``availableEndTime``.',
    )
    field_availableStartTime: Optional[FHIRPrimitiveExtension] = Field(
        None,
        alias='_availableStartTime',
        title='Extension field for ``availableStartTime``.',
    )
    field_daysOfWeek: Optional[List[FHIRPrimitiveExtension]] = Field(
        None, alias='_daysOfWeek', title='Extension field for ``daysOfWeek``.'
    )
    allDay: Optional[bool] = Field(None, title='Always available? i.e. 24 hour service')
    availableEndTime: Optional[time] = Field(
        None, title='Closing time of day (ignored if allDay = true)'
    )
    availableStartTime: Optional[time] = Field(
        None, title='Opening time of day (ignored if allDay = true)'
    )
    daysOfWeek: Optional[List[constr(pattern=r'^[^\s]+(\s[^\s]+)*$')]] = Field(
        None, title='mon | tue | wed | thu | fri | sat | sun'
    )
    extension: Optional[List[Extension]] = Field(
        None,
        description='May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.',
        title='Additional content defined by implementations',
    )
    fhir_comments: Optional[Union[str, List[str]]] = Field(None, title='Fhir Comments')
    id: Optional[constr(pattern=r'[ \r\n\t\S]+')] = Field(
        None,
        description='Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.',
        title='Unique id for inter-element referencing',
    )
    links: Optional[List[Link]] = None
    resourceType: Literal['AvailabilityAvailableTime'] = Field(
        'AvailabilityAvailableTime',
        description='One of the resource types defined as part of FHIR',
        title='Resource Type',
    )


class AvailabilityNotAvailableTime(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    field_description: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_description', title='Extension field for ``description``.'
    )
    description: Optional[constr(pattern=r'[ \r\n\t\S]+')] = Field(
        None, title='Reason presented to the user explaining why time not available'
    )
    during: Optional[Period] = Field(
        None, title='Service not available during this period'
    )
    extension: Optional[List[Extension]] = Field(
        None,
        description='May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.',
        title='Additional content defined by implementations',
    )
    fhir_comments: Optional[Union[str, List[str]]] = Field(None, title='Fhir Comments')
    id: Optional[constr(pattern=r'[ \r\n\t\S]+')] = Field(
        None,
        description='Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.',
        title='Unique id for inter-element referencing',
    )
    links: Optional[List[Link]] = None
    resourceType: Literal['AvailabilityNotAvailableTime'] = Field(
        'AvailabilityNotAvailableTime',
        description='One of the resource types defined as part of FHIR',
        title='Resource Type',
    )


class CodeableReference(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    concept: Optional[CodeableConcept] = Field(
        None,
        description='A reference to a concept - e.g. the information is identified by its general class to the degree of precision found in the terminology.',
        title='Reference to a concept (by class)',
    )
    extension: Optional[List[Extension]] = Field(
        None,
        description='May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.',
        title='Additional content defined by implementations',
    )
    fhir_comments: Optional[Union[str, List[str]]] = Field(None, title='Fhir Comments')
    id: Optional[constr(pattern=r'[ \r\n\t\S]+')] = Field(
        None,
        description='Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.',
        title='Unique id for inter-element referencing',
    )
    links: Optional[List[Link]] = None
    reference: Optional[Reference] = Field(
        None,
        description='A reference to a resource the provides exact details about the information being referenced.',
        title='Reference to a resource (by instance)',
    )
    resourceType: Literal['CodeableReference'] = Field(
        'CodeableReference',
        description='One of the resource types defined as part of FHIR',
        title='Resource Type',
    )


class ContactDetail(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    field_name: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_name', title='Extension field for ``name``.'
    )
    extension: Optional[List[Extension]] = Field(
        None,
        description='May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.',
        title='Additional content defined by implementations',
    )
    fhir_comments: Optional[Union[str, List[str]]] = Field(None, title='Fhir Comments')
    id: Optional[constr(pattern=r'[ \r\n\t\S]+')] = Field(
        None,
        description='Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.',
        title='Unique id for inter-element referencing',
    )
    links: Optional[List[Link]] = None
    name: Optional[constr(pattern=r'[ \r\n\t\S]+')] = Field(
        None,
        description='The name of an individual to contact.',
        title='Name of an individual to contact',
    )
    resourceType: Literal['ContactDetail'] = Field(
        'ContactDetail',
        description='One of the resource types defined as part of FHIR',
        title='Resource Type',
    )
    telecom: Optional[List[ContactPoint]] = Field(
        None,
        description='The contact details for the individual (if a name was provided) or the organization.',
        title='Contact details for individual or organization',
    )


class ContactPoint(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    field_rank: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_rank', title='Extension field for ``rank``.'
    )
    field_system: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_system', title='Extension field for ``system``.'
    )
    field_use: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_use', title='Extension field for ``use``.'
    )
    field_value: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_value', title='Extension field for ``value``.'
    )
    extension: Optional[List[Extension]] = Field(
        None,
        description='May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.',
        title='Additional content defined by implementations',
    )
    fhir_comments: Optional[Union[str, List[str]]] = Field(None, title='Fhir Comments')
    id: Optional[constr(pattern=r'[ \r\n\t\S]+')] = Field(
        None,
        description='Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.',
        title='Unique id for inter-element referencing',
    )
    links: Optional[List[Link]] = None
    period: Optional[Period] = Field(
        None, title='Time period when the contact point was/is in use'
    )
    rank: Optional[PositiveInt] = Field(
        None,
        description='Specifies a preferred order in which to use a set of contacts. ContactPoints with lower rank values are more preferred than those with higher rank values.',
        title='Specify preferred order of use (1 = highest)',
    )
    resourceType: Literal['ContactPoint'] = Field(
        'ContactPoint',
        description='One of the resource types defined as part of FHIR',
        title='Resource Type',
    )
    system: Optional[constr(pattern=r'^[^\s]+(\s[^\s]+)*$')] = Field(
        None,
        description='Telecommunications form for contact point - what communications system is required to make use of the contact.',
        title='phone | fax | email | pager | url | sms | other',
    )
    use: Optional[constr(pattern=r'^[^\s]+(\s[^\s]+)*$')] = Field(
        None,
        description='Identifies the purpose for the contact point.',
        title='home | work | temp | old | mobile - purpose of this contact point',
    )
    value: Optional[constr(pattern=r'[ \r\n\t\S]+')] = Field(
        None,
        description='The actual contact point details, in a form that is meaningful to the designated communication system (i.e. phone number or email address).',
        title='The actual contact point details',
    )


class Count(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    field_code: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_code', title='Extension field for ``code``.'
    )
    field_comparator: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_comparator', title='Extension field for ``comparator``.'
    )
    field_system: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_system', title='Extension field for ``system``.'
    )
    field_unit: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_unit', title='Extension field for ``unit``.'
    )
    field_value: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_value', title='Extension field for ``value``.'
    )
    code: Optional[constr(pattern=r'^[^\s]+(\s[^\s]+)*$')] = Field(
        None,
        description='A computer processable form of the unit in some unit representation system.',
        title='Coded form of the unit',
    )
    comparator: Optional[constr(pattern=r'^[^\s]+(\s[^\s]+)*$')] = Field(
        None,
        description='How the value should be understood and represented - whether the actual value is greater or less than the stated value due to measurement issues; e.g. if the comparator is "<" , then the real value is < stated value.',
        title='< | <= | >= | > | ad - how to understand the value',
    )
    extension: Optional[List[Extension]] = Field(
        None,
        description='May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.',
        title='Additional content defined by implementations',
    )
    fhir_comments: Optional[Union[str, List[str]]] = Field(None, title='Fhir Comments')
    id: Optional[constr(pattern=r'[ \r\n\t\S]+')] = Field(
        None,
        description='Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.',
        title='Unique id for inter-element referencing',
    )
    links: Optional[List[Link]] = None
    resourceType: Literal['Count'] = Field(
        'Count',
        description='One of the resource types defined as part of FHIR',
        title='Resource Type',
    )
    system: Optional[constr(pattern=r'\S*')] = Field(
        None,
        description='The identification of the system that provides the coded form of the unit.',
        title='System that defines coded unit form',
    )
    unit: Optional[constr(pattern=r'[ \r\n\t\S]+')] = Field(
        None,
        description='A human-readable form of the unit.',
        title='Unit representation',
    )
    value: Optional[float] = Field(
        None,
        description='The value of the measured amount. The value includes an implicit precision in the presentation of the value.',
        title='Numerical value (with implicit precision)',
    )


class DataRequirement(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    field_limit: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_limit', title='Extension field for ``limit``.'
    )
    field_mustSupport: Optional[List[FHIRPrimitiveExtension]] = Field(
        None, alias='_mustSupport', title='Extension field for ``mustSupport``.'
    )
    field_profile: Optional[List[FHIRPrimitiveExtension]] = Field(
        None, alias='_profile', title='Extension field for ``profile``.'
    )
    field_type: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_type', title='Extension field for ``type``.'
    )
    codeFilter: Optional[List[DataRequirementCodeFilter]] = Field(
        None,
        description="Code filters specify additional constraints on the data, specifying the value set of interest for a particular element of the data. Each code filter defines an additional constraint on the data, i.e. code filters are AND'ed, not OR'ed.",
        title='What codes are expected',
    )
    dateFilter: Optional[List[DataRequirementDateFilter]] = Field(
        None,
        description="Date filters specify additional constraints on the data in terms of the applicable date range for specific elements. Each date filter specifies an additional constraint on the data, i.e. date filters are AND'ed, not OR'ed.",
        title='What dates/date ranges are expected',
    )
    extension: Optional[List[Extension]] = Field(
        None,
        description='May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.',
        title='Additional content defined by implementations',
    )
    fhir_comments: Optional[Union[str, List[str]]] = Field(None, title='Fhir Comments')
    id: Optional[constr(pattern=r'[ \r\n\t\S]+')] = Field(
        None,
        description='Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.',
        title='Unique id for inter-element referencing',
    )
    limit: Optional[PositiveInt] = Field(
        None,
        description='Specifies a maximum number of results that are required (uses the _count search parameter).',
        title='Number of results',
    )
    links: Optional[List[Link]] = None
    mustSupport: Optional[List[constr(pattern=r'[ \r\n\t\S]+')]] = Field(
        None,
        description='Indicates that specific elements of the type are referenced by the knowledge module and must be supported by the consumer in order to obtain an effective evaluation. This does not mean that a value is required for this element, only that the consuming system must understand the element and be able to provide values for it if they are available.   The value of mustSupport SHALL be a FHIRPath resolvable on the type of the DataRequirement. The path SHALL consist only of identifiers, constant indexers, and .resolve() (see the [Simple FHIRPath Profile](fhirpath.html#simple) for full details).',
        title='Indicates specific structure elements that are referenced by the knowledge module',
    )
    profile: Optional[List[constr(pattern=r'\S*')]] = Field(
        None,
        description='The profile of the required data, specified as the uri of the profile definition.',
        title='The profile of the required data',
    )
    resourceType: Literal['DataRequirement'] = Field(
        'DataRequirement',
        description='One of the resource types defined as part of FHIR',
        title='Resource Type',
    )
    sort: Optional[List[DataRequirementSort]] = Field(
        None,
        description='Specifies the order of the results to be returned.',
        title='Order of the results',
    )
    subjectCodeableConcept: Optional[CodeableConcept] = Field(
        None,
        description='The intended subjects of the data requirement. If this element is not provided, a Patient subject is assumed.',
        title='E.g. Patient, Practitioner, RelatedPerson, Organization, Location, Device',
    )
    subjectReference: Optional[Reference] = Field(
        None,
        description='The intended subjects of the data requirement. If this element is not provided, a Patient subject is assumed.',
        title='E.g. Patient, Practitioner, RelatedPerson, Organization, Location, Device',
    )
    type: Optional[constr(pattern=r'^[^\s]+(\s[^\s]+)*$')] = Field(
        None,
        description='The type of the required data, specified as the type name of a resource. For profiles, this value is set to the type of the base resource of the profile.',
        title='The type of the required data',
    )
    valueFilter: Optional[List[DataRequirementValueFilter]] = Field(
        None,
        description="Value filters specify additional constraints on the data for elements other than code-valued or date-valued. Each value filter specifies an additional constraint on the data (i.e. valueFilters are AND'ed, not OR'ed).",
        title='What values are expected',
    )


class DataRequirementCodeFilter(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    field_path: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_path', title='Extension field for ``path``.'
    )
    field_searchParam: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_searchParam', title='Extension field for ``searchParam``.'
    )
    field_valueSet: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_valueSet', title='Extension field for ``valueSet``.'
    )
    code: Optional[List[Coding]] = Field(
        None,
        description='The codes for the code filter. If values are given, the filter will return only those data items for which the code-valued attribute specified by the path has a value that is one of the specified codes. If codes are specified in addition to a value set, the filter returns items matching a code in the value set or one of the specified codes.',
        title='What code is expected',
    )
    extension: Optional[List[Extension]] = Field(
        None,
        description='May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.',
        title='Additional content defined by implementations',
    )
    fhir_comments: Optional[Union[str, List[str]]] = Field(None, title='Fhir Comments')
    id: Optional[constr(pattern=r'[ \r\n\t\S]+')] = Field(
        None,
        description='Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.',
        title='Unique id for inter-element referencing',
    )
    links: Optional[List[Link]] = None
    path: Optional[constr(pattern=r'[ \r\n\t\S]+')] = Field(
        None,
        description='The code-valued attribute of the filter. The specified path SHALL be a FHIRPath resolvable on the specified type of the DataRequirement, and SHALL consist only of identifiers, constant indexers, and .resolve(). The path is allowed to contain qualifiers (.) to traverse sub-elements, as well as indexers ([x]) to traverse multiple-cardinality sub-elements (see the [Simple FHIRPath Profile](fhirpath.html#simple) for full details). Note that the index must be an integer constant. The path must resolve to an element of type code, Coding, or CodeableConcept.',
        title='A code-valued attribute to filter on',
    )
    resourceType: Literal['DataRequirementCodeFilter'] = Field(
        'DataRequirementCodeFilter',
        description='One of the resource types defined as part of FHIR',
        title='Resource Type',
    )
    searchParam: Optional[constr(pattern=r'[ \r\n\t\S]+')] = Field(
        None,
        description='A token parameter that refers to a search parameter defined on the specified type of the DataRequirement, and which searches on elements of type code, Coding, or CodeableConcept.',
        title='A coded (token) parameter to search on',
    )
    valueSet: Optional[constr(pattern=r'\S*')] = Field(
        None,
        description='The valueset for the code filter. The valueSet and code elements are additive. If valueSet is specified, the filter will return only those data items for which the value of the code-valued element specified in the path is a member of the specified valueset.',
        title='ValueSet for the filter',
    )


class DataRequirementDateFilter(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    field_path: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_path', title='Extension field for ``path``.'
    )
    field_searchParam: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_searchParam', title='Extension field for ``searchParam``.'
    )
    field_valueDateTime: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_valueDateTime', title='Extension field for ``valueDateTime``.'
    )
    extension: Optional[List[Extension]] = Field(
        None,
        description='May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.',
        title='Additional content defined by implementations',
    )
    fhir_comments: Optional[Union[str, List[str]]] = Field(None, title='Fhir Comments')
    id: Optional[constr(pattern=r'[ \r\n\t\S]+')] = Field(
        None,
        description='Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.',
        title='Unique id for inter-element referencing',
    )
    links: Optional[List[Link]] = None
    path: Optional[constr(pattern=r'[ \r\n\t\S]+')] = Field(
        None,
        description='The date-valued attribute of the filter. The specified path SHALL be a FHIRPath resolvable on the specified type of the DataRequirement, and SHALL consist only of identifiers, constant indexers, and .resolve(). The path is allowed to contain qualifiers (.) to traverse sub-elements, as well as indexers ([x]) to traverse multiple-cardinality sub-elements (see the [Simple FHIRPath Profile](fhirpath.html#simple) for full details). Note that the index must be an integer constant. The path must resolve to an element of type date, dateTime, Period, Schedule, or Timing.',
        title='A date-valued attribute to filter on',
    )
    resourceType: Literal['DataRequirementDateFilter'] = Field(
        'DataRequirementDateFilter',
        description='One of the resource types defined as part of FHIR',
        title='Resource Type',
    )
    searchParam: Optional[constr(pattern=r'[ \r\n\t\S]+')] = Field(
        None,
        description='A date parameter that refers to a search parameter defined on the specified type of the DataRequirement, and which searches on elements of type date, dateTime, Period, Schedule, or Timing.',
        title='A date valued parameter to search on',
    )
    valueDateTime: Optional[AwareDatetime] = Field(
        None,
        description='The value of the filter. If period is specified, the filter will return only those data items that fall within the bounds determined by the Period, inclusive of the period boundaries. If dateTime is specified, the filter will return only those data items that are equal to the specified dateTime. If a Duration is specified, the filter will return only those data items that fall within Duration before now.',
        title='The value of the filter, as a Period, DateTime, or Duration value',
    )
    valueDuration: Optional[Duration] = Field(
        None,
        description='The value of the filter. If period is specified, the filter will return only those data items that fall within the bounds determined by the Period, inclusive of the period boundaries. If dateTime is specified, the filter will return only those data items that are equal to the specified dateTime. If a Duration is specified, the filter will return only those data items that fall within Duration before now.',
        title='The value of the filter, as a Period, DateTime, or Duration value',
    )
    valuePeriod: Optional[Period] = Field(
        None,
        description='The value of the filter. If period is specified, the filter will return only those data items that fall within the bounds determined by the Period, inclusive of the period boundaries. If dateTime is specified, the filter will return only those data items that are equal to the specified dateTime. If a Duration is specified, the filter will return only those data items that fall within Duration before now.',
        title='The value of the filter, as a Period, DateTime, or Duration value',
    )


class Duration(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    field_code: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_code', title='Extension field for ``code``.'
    )
    field_comparator: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_comparator', title='Extension field for ``comparator``.'
    )
    field_system: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_system', title='Extension field for ``system``.'
    )
    field_unit: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_unit', title='Extension field for ``unit``.'
    )
    field_value: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_value', title='Extension field for ``value``.'
    )
    code: Optional[constr(pattern=r'^[^\s]+(\s[^\s]+)*$')] = Field(
        None,
        description='A computer processable form of the unit in some unit representation system.',
        title='Coded form of the unit',
    )
    comparator: Optional[constr(pattern=r'^[^\s]+(\s[^\s]+)*$')] = Field(
        None,
        description='How the value should be understood and represented - whether the actual value is greater or less than the stated value due to measurement issues; e.g. if the comparator is "<" , then the real value is < stated value.',
        title='< | <= | >= | > | ad - how to understand the value',
    )
    extension: Optional[List[Extension]] = Field(
        None,
        description='May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.',
        title='Additional content defined by implementations',
    )
    fhir_comments: Optional[Union[str, List[str]]] = Field(None, title='Fhir Comments')
    id: Optional[constr(pattern=r'[ \r\n\t\S]+')] = Field(
        None,
        description='Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.',
        title='Unique id for inter-element referencing',
    )
    links: Optional[List[Link]] = None
    resourceType: Literal['Duration'] = Field(
        'Duration',
        description='One of the resource types defined as part of FHIR',
        title='Resource Type',
    )
    system: Optional[constr(pattern=r'\S*')] = Field(
        None,
        description='The identification of the system that provides the coded form of the unit.',
        title='System that defines coded unit form',
    )
    unit: Optional[constr(pattern=r'[ \r\n\t\S]+')] = Field(
        None,
        description='A human-readable form of the unit.',
        title='Unit representation',
    )
    value: Optional[float] = Field(
        None,
        description='The value of the measured amount. The value includes an implicit precision in the presentation of the value.',
        title='Numerical value (with implicit precision)',
    )


class DataRequirementSort(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    field_direction: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_direction', title='Extension field for ``direction``.'
    )
    field_path: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_path', title='Extension field for ``path``.'
    )
    direction: Optional[constr(pattern=r'^[^\s]+(\s[^\s]+)*$')] = Field(
        None,
        description='The direction of the sort, ascending or descending.',
        title='ascending | descending',
    )
    extension: Optional[List[Extension]] = Field(
        None,
        description='May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.',
        title='Additional content defined by implementations',
    )
    fhir_comments: Optional[Union[str, List[str]]] = Field(None, title='Fhir Comments')
    id: Optional[constr(pattern=r'[ \r\n\t\S]+')] = Field(
        None,
        description='Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.',
        title='Unique id for inter-element referencing',
    )
    links: Optional[List[Link]] = None
    path: Optional[constr(pattern=r'[ \r\n\t\S]+')] = Field(
        None,
        description='The attribute of the sort. The specified path must be resolvable from the type of the required data. The path is allowed to contain qualifiers (.) to traverse sub-elements, as well as indexers ([x]) to traverse multiple-cardinality sub-elements. Note that the index must be an integer constant.',
        title='The name of the attribute to perform the sort',
    )
    resourceType: Literal['DataRequirementSort'] = Field(
        'DataRequirementSort',
        description='One of the resource types defined as part of FHIR',
        title='Resource Type',
    )


class DataRequirementValueFilter(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    field_comparator: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_comparator', title='Extension field for ``comparator``.'
    )
    field_path: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_path', title='Extension field for ``path``.'
    )
    field_searchParam: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_searchParam', title='Extension field for ``searchParam``.'
    )
    field_valueDateTime: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_valueDateTime', title='Extension field for ``valueDateTime``.'
    )
    comparator: Optional[constr(pattern=r'^[^\s]+(\s[^\s]+)*$')] = Field(
        None,
        description='The comparator to be used to determine whether the value is matching.',
        title='eq | gt | lt | ge | le | sa | eb',
    )
    extension: Optional[List[Extension]] = Field(
        None,
        description='May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.',
        title='Additional content defined by implementations',
    )
    fhir_comments: Optional[Union[str, List[str]]] = Field(None, title='Fhir Comments')
    id: Optional[constr(pattern=r'[ \r\n\t\S]+')] = Field(
        None,
        description='Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.',
        title='Unique id for inter-element referencing',
    )
    links: Optional[List[Link]] = None
    path: Optional[constr(pattern=r'[ \r\n\t\S]+')] = Field(
        None,
        description='The attribute of the filter. The specified path SHALL be a FHIRPath resolvable on the specified type of the DataRequirement, and SHALL consist only of identifiers, constant indexers, and .resolve(). The path is allowed to contain qualifiers (.) to traverse sub-elements, as well as indexers ([x]) to traverse multiple-cardinality sub-elements (see the [Simple FHIRPath Profile](fhirpath.html#simple) for full details). Note that the index must be an integer constant. The path must resolve to an element of a type that is comparable to the valueFilter.value[x] element for the filter.',
        title='An attribute to filter on',
    )
    resourceType: Literal['DataRequirementValueFilter'] = Field(
        'DataRequirementValueFilter',
        description='One of the resource types defined as part of FHIR',
        title='Resource Type',
    )
    searchParam: Optional[constr(pattern=r'[ \r\n\t\S]+')] = Field(
        None,
        description='A search parameter defined on the specified type of the DataRequirement, and which searches on elements of a type compatible with the type of the valueFilter.value[x] for the filter.',
        title='A parameter to search on',
    )
    valueDateTime: Optional[AwareDatetime] = Field(
        None,
        description='The value of the filter.',
        title='The value of the filter, as a Period, DateTime, or Duration value',
    )
    valueDuration: Optional[Duration] = Field(
        None,
        description='The value of the filter.',
        title='The value of the filter, as a Period, DateTime, or Duration value',
    )
    valuePeriod: Optional[Period] = Field(
        None,
        description='The value of the filter.',
        title='The value of the filter, as a Period, DateTime, or Duration value',
    )


class Distance(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    field_code: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_code', title='Extension field for ``code``.'
    )
    field_comparator: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_comparator', title='Extension field for ``comparator``.'
    )
    field_system: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_system', title='Extension field for ``system``.'
    )
    field_unit: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_unit', title='Extension field for ``unit``.'
    )
    field_value: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_value', title='Extension field for ``value``.'
    )
    code: Optional[constr(pattern=r'^[^\s]+(\s[^\s]+)*$')] = Field(
        None,
        description='A computer processable form of the unit in some unit representation system.',
        title='Coded form of the unit',
    )
    comparator: Optional[constr(pattern=r'^[^\s]+(\s[^\s]+)*$')] = Field(
        None,
        description='How the value should be understood and represented - whether the actual value is greater or less than the stated value due to measurement issues; e.g. if the comparator is "<" , then the real value is < stated value.',
        title='< | <= | >= | > | ad - how to understand the value',
    )
    extension: Optional[List[Extension]] = Field(
        None,
        description='May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.',
        title='Additional content defined by implementations',
    )
    fhir_comments: Optional[Union[str, List[str]]] = Field(None, title='Fhir Comments')
    id: Optional[constr(pattern=r'[ \r\n\t\S]+')] = Field(
        None,
        description='Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.',
        title='Unique id for inter-element referencing',
    )
    links: Optional[List[Link]] = None
    resourceType: Literal['Distance'] = Field(
        'Distance',
        description='One of the resource types defined as part of FHIR',
        title='Resource Type',
    )
    system: Optional[constr(pattern=r'\S*')] = Field(
        None,
        description='The identification of the system that provides the coded form of the unit.',
        title='System that defines coded unit form',
    )
    unit: Optional[constr(pattern=r'[ \r\n\t\S]+')] = Field(
        None,
        description='A human-readable form of the unit.',
        title='Unit representation',
    )
    value: Optional[float] = Field(
        None,
        description='The value of the measured amount. The value includes an implicit precision in the presentation of the value.',
        title='Numerical value (with implicit precision)',
    )


class Dosage(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    field_asNeeded: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_asNeeded', title='Extension field for ``asNeeded``.'
    )
    field_patientInstruction: Optional[FHIRPrimitiveExtension] = Field(
        None,
        alias='_patientInstruction',
        title='Extension field for ``patientInstruction``.',
    )
    field_sequence: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_sequence', title='Extension field for ``sequence``.'
    )
    field_text: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_text', title='Extension field for ``text``.'
    )
    additionalInstruction: Optional[List[CodeableConcept]] = Field(
        None,
        description='Supplemental instructions to the patient on how to take the medication  (e.g. "with meals" or"take half to one hour before food") or warnings for the patient about the medication (e.g. "may cause drowsiness" or "avoid exposure of skin to direct sunlight or sunlamps").',
        title='Supplemental instruction or warnings to the patient - e.g. "with meals", "may cause drowsiness"',
    )
    asNeeded: Optional[bool] = Field(
        None,
        description='Indicates whether the Medication is only taken when needed within a specific dosing schedule (Boolean option).',
        title='Take "as needed"',
    )
    asNeededFor: Optional[List[CodeableConcept]] = Field(
        None,
        description='Indicates whether the Medication is only taken based on a precondition for taking the Medication (CodeableConcept).',
        title='Take "as needed" (for x)',
    )
    doseAndRate: Optional[List[DosageDoseAndRate]] = Field(
        None,
        description='Depending on the resource,this is the amount of medication administered, to  be administered or typical amount to be administered.',
        title='Amount of medication administered, to be administered or typical amount to be administered',
    )
    extension: Optional[List[Extension]] = Field(
        None,
        description='May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.',
        title='Additional content defined by implementations',
    )
    fhir_comments: Optional[Union[str, List[str]]] = Field(None, title='Fhir Comments')
    id: Optional[constr(pattern=r'[ \r\n\t\S]+')] = Field(
        None,
        description='Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.',
        title='Unique id for inter-element referencing',
    )
    links: Optional[List[Link]] = None
    maxDosePerAdministration: Optional[Quantity] = Field(
        None, title='Upper limit on medication per administration'
    )
    maxDosePerLifetime: Optional[Quantity] = Field(
        None, title='Upper limit on medication per lifetime of the patient'
    )
    maxDosePerPeriod: Optional[List[Ratio]] = Field(
        None, title='Upper limit on medication per unit of time'
    )
    method: Optional[CodeableConcept] = Field(
        None, title='Technique for administering medication'
    )
    modifierExtension: Optional[List[Extension]] = Field(
        None,
        description="May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
        title='Extensions that cannot be ignored even if unrecognized',
    )
    patientInstruction: Optional[constr(pattern=r'[ \r\n\t\S]+')] = Field(
        None,
        description='Instructions in terms that are understood by the patient or consumer.',
        title='Patient or consumer oriented instructions',
    )
    resourceType: Literal['Dosage'] = Field(
        'Dosage',
        description='One of the resource types defined as part of FHIR',
        title='Resource Type',
    )
    route: Optional[CodeableConcept] = Field(None, title='How drug should enter body')
    sequence: Optional[int] = Field(
        None,
        description='Indicates the order in which the dosage instructions should be applied or interpreted.',
        title='The order of the dosage instructions',
    )
    site: Optional[CodeableConcept] = Field(None, title='Body site to administer to')
    text: Optional[constr(pattern=r'[ \r\n\t\S]+')] = Field(
        None, title='Free text dosage instructions e.g. SIG'
    )
    timing: Optional[Timing] = Field(
        None, title='When medication should be administered'
    )


class DosageDoseAndRate(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    doseQuantity: Optional[Quantity] = Field(
        None, title='Amount of medication per dose'
    )
    doseRange: Optional[Range] = Field(None, title='Amount of medication per dose')
    extension: Optional[List[Extension]] = Field(
        None,
        description='May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.',
        title='Additional content defined by implementations',
    )
    fhir_comments: Optional[Union[str, List[str]]] = Field(None, title='Fhir Comments')
    id: Optional[constr(pattern=r'[ \r\n\t\S]+')] = Field(
        None,
        description='Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.',
        title='Unique id for inter-element referencing',
    )
    links: Optional[List[Link]] = None
    rateQuantity: Optional[Quantity] = Field(
        None, title='Amount of medication per unit of time'
    )
    rateRange: Optional[Range] = Field(
        None, title='Amount of medication per unit of time'
    )
    rateRatio: Optional[Ratio] = Field(
        None, title='Amount of medication per unit of time'
    )
    resourceType: Literal['DosageDoseAndRate'] = Field(
        'DosageDoseAndRate',
        description='One of the resource types defined as part of FHIR',
        title='Resource Type',
    )
    type: Optional[CodeableConcept] = Field(
        None,
        description='The kind of dose or rate specified, for example, ordered or calculated.',
        title='The kind of dose or rate specified',
    )


class Quantity(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    field_code: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_code', title='Extension field for ``code``.'
    )
    field_comparator: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_comparator', title='Extension field for ``comparator``.'
    )
    field_system: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_system', title='Extension field for ``system``.'
    )
    field_unit: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_unit', title='Extension field for ``unit``.'
    )
    field_value: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_value', title='Extension field for ``value``.'
    )
    code: Optional[constr(pattern=r'^[^\s]+(\s[^\s]+)*$')] = Field(
        None,
        description='A computer processable form of the unit in some unit representation system.',
        title='Coded form of the unit',
    )
    comparator: Optional[constr(pattern=r'^[^\s]+(\s[^\s]+)*$')] = Field(
        None,
        description='How the value should be understood and represented - whether the actual value is greater or less than the stated value due to measurement issues; e.g. if the comparator is "<" , then the real value is < stated value.',
        title='< | <= | >= | > | ad - how to understand the value',
    )
    extension: Optional[List[Extension]] = Field(
        None,
        description='May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.',
        title='Additional content defined by implementations',
    )
    fhir_comments: Optional[Union[str, List[str]]] = Field(None, title='Fhir Comments')
    id: Optional[constr(pattern=r'[ \r\n\t\S]+')] = Field(
        None,
        description='Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.',
        title='Unique id for inter-element referencing',
    )
    links: Optional[List[Link]] = None
    resourceType: Literal['Quantity'] = Field(
        'Quantity',
        description='One of the resource types defined as part of FHIR',
        title='Resource Type',
    )
    system: Optional[constr(pattern=r'\S*')] = Field(
        None,
        description='The identification of the system that provides the coded form of the unit.',
        title='System that defines coded unit form',
    )
    unit: Optional[constr(pattern=r'[ \r\n\t\S]+')] = Field(
        None,
        description='A human-readable form of the unit.',
        title='Unit representation',
    )
    value: Optional[float] = Field(
        None,
        description='The value of the measured amount. The value includes an implicit precision in the presentation of the value.',
        title='Numerical value (with implicit precision)',
    )


class Range(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    extension: Optional[List[Extension]] = Field(
        None,
        description='May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.',
        title='Additional content defined by implementations',
    )
    fhir_comments: Optional[Union[str, List[str]]] = Field(None, title='Fhir Comments')
    high: Optional[Quantity] = Field(
        None,
        description='The high limit. The boundary is inclusive.',
        title='High limit',
    )
    id: Optional[constr(pattern=r'[ \r\n\t\S]+')] = Field(
        None,
        description='Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.',
        title='Unique id for inter-element referencing',
    )
    links: Optional[List[Link]] = None
    low: Optional[Quantity] = Field(
        None, description='The low limit. The boundary is inclusive.', title='Low limit'
    )
    resourceType: Literal['Range'] = Field(
        'Range',
        description='One of the resource types defined as part of FHIR',
        title='Resource Type',
    )


class Ratio(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    denominator: Optional[Quantity] = Field(
        None, description='The value of the denominator.', title='Denominator value'
    )
    extension: Optional[List[Extension]] = Field(
        None,
        description='May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.',
        title='Additional content defined by implementations',
    )
    fhir_comments: Optional[Union[str, List[str]]] = Field(None, title='Fhir Comments')
    id: Optional[constr(pattern=r'[ \r\n\t\S]+')] = Field(
        None,
        description='Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.',
        title='Unique id for inter-element referencing',
    )
    links: Optional[List[Link]] = None
    numerator: Optional[Quantity] = Field(
        None, description='The value of the numerator.', title='Numerator value'
    )
    resourceType: Literal['Ratio'] = Field(
        'Ratio',
        description='One of the resource types defined as part of FHIR',
        title='Resource Type',
    )


class Timing(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    field_event: Optional[List[FHIRPrimitiveExtension]] = Field(
        None, alias='_event', title='Extension field for ``event``.'
    )
    code: Optional[CodeableConcept] = Field(
        None,
        description='A code for the timing schedule (or just text in code.text). Some codes such as BID are ubiquitous, but many institutions define their own additional codes. If a code is provided, the code is understood to be a complete statement of whatever is specified in the structured timing data, and either the code or the data may be used to interpret the Timing, with the exception that .repeat.bounds still applies over the code (and is not contained in the code).',
        title='C | BID | TID | QID | AM | PM | QD | QOD | +',
    )
    event: Optional[List[AwareDatetime]] = Field(
        None,
        description='Identifies specific times when the event occurs.',
        title='When the event occurs',
    )
    extension: Optional[List[Extension]] = Field(
        None,
        description='May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.',
        title='Additional content defined by implementations',
    )
    fhir_comments: Optional[Union[str, List[str]]] = Field(None, title='Fhir Comments')
    id: Optional[constr(pattern=r'[ \r\n\t\S]+')] = Field(
        None,
        description='Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.',
        title='Unique id for inter-element referencing',
    )
    links: Optional[List[Link]] = None
    modifierExtension: Optional[List[Extension]] = Field(
        None,
        description="May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
        title='Extensions that cannot be ignored even if unrecognized',
    )
    repeat: Optional[TimingRepeat] = Field(
        None,
        description='A set of rules that describe when the event is scheduled.',
        title='When the event is to occur',
    )
    resourceType: Literal['Timing'] = Field(
        'Timing',
        description='One of the resource types defined as part of FHIR',
        title='Resource Type',
    )


class TimingRepeat(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    field_count: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_count', title='Extension field for ``count``.'
    )
    field_countMax: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_countMax', title='Extension field for ``countMax``.'
    )
    field_dayOfWeek: Optional[List[FHIRPrimitiveExtension]] = Field(
        None, alias='_dayOfWeek', title='Extension field for ``dayOfWeek``.'
    )
    field_duration: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_duration', title='Extension field for ``duration``.'
    )
    field_durationMax: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_durationMax', title='Extension field for ``durationMax``.'
    )
    field_durationUnit: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_durationUnit', title='Extension field for ``durationUnit``.'
    )
    field_frequency: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_frequency', title='Extension field for ``frequency``.'
    )
    field_frequencyMax: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_frequencyMax', title='Extension field for ``frequencyMax``.'
    )
    field_offset: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_offset', title='Extension field for ``offset``.'
    )
    field_period: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_period', title='Extension field for ``period``.'
    )
    field_periodMax: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_periodMax', title='Extension field for ``periodMax``.'
    )
    field_periodUnit: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_periodUnit', title='Extension field for ``periodUnit``.'
    )
    field_timeOfDay: Optional[List[FHIRPrimitiveExtension]] = Field(
        None, alias='_timeOfDay', title='Extension field for ``timeOfDay``.'
    )
    field_when: Optional[List[FHIRPrimitiveExtension]] = Field(
        None, alias='_when', title='Extension field for ``when``.'
    )
    boundsDuration: Optional[Duration] = Field(
        None,
        description='Either a duration for the length of the timing schedule, a range of possible length, or outer bounds for start and/or end limits of the timing schedule.',
        title='Length/Range of lengths, or (Start and/or end) limits',
    )
    boundsPeriod: Optional[Period] = Field(
        None,
        description='Either a duration for the length of the timing schedule, a range of possible length, or outer bounds for start and/or end limits of the timing schedule.',
        title='Length/Range of lengths, or (Start and/or end) limits',
    )
    boundsRange: Optional[Range] = Field(
        None,
        description='Either a duration for the length of the timing schedule, a range of possible length, or outer bounds for start and/or end limits of the timing schedule.',
        title='Length/Range of lengths, or (Start and/or end) limits',
    )
    count: Optional[PositiveInt] = Field(
        None,
        description='A total count of the desired number of repetitions across the duration of the entire timing specification. If countMax is present, this element indicates the lower bound of the allowed range of count values.',
        title='Number of times to repeat',
    )
    countMax: Optional[PositiveInt] = Field(
        None,
        description='If present, indicates that the count is a range - so to perform the action between [count] and [countMax] times.',
        title='Maximum number of times to repeat',
    )
    dayOfWeek: Optional[List[constr(pattern=r'^[^\s]+(\s[^\s]+)*$')]] = Field(
        None,
        description='If one or more days of week is provided, then the action happens only on the specified day(s).',
        title='mon | tue | wed | thu | fri | sat | sun',
    )
    duration: Optional[float] = Field(
        None,
        description='How long this thing happens for when it happens. If durationMax is present, this element indicates the lower bound of the allowed range of the duration.',
        title='How long when it happens',
    )
    durationMax: Optional[float] = Field(
        None,
        description='If present, indicates that the duration is a range - so to perform the action between [duration] and [durationMax] time length.',
        title='How long when it happens (Max)',
    )
    durationUnit: Optional[constr(pattern=r'^[^\s]+(\s[^\s]+)*$')] = Field(
        None,
        description="The units of time for the duration, in UCUM units Normal practice is to use the 'mo' code as a calendar month when calculating the next occurrence.",
        title='s | min | h | d | wk | mo | a - unit of time (UCUM)',
    )
    extension: Optional[List[Extension]] = Field(
        None,
        description='May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.',
        title='Additional content defined by implementations',
    )
    fhir_comments: Optional[Union[str, List[str]]] = Field(None, title='Fhir Comments')
    frequency: Optional[PositiveInt] = Field(
        None,
        description='The number of times to repeat the action within the specified period. If frequencyMax is present, this element indicates the lower bound of the allowed range of the frequency.',
        title='Indicates the number of repetitions that should occur within a period. I.e. Event occurs frequency times per period',
    )
    frequencyMax: Optional[PositiveInt] = Field(
        None,
        description='If present, indicates that the frequency is a range - so to repeat between [frequency] and [frequencyMax] times within the period or period range.',
        title='Event occurs up to frequencyMax times per period',
    )
    id: Optional[constr(pattern=r'[ \r\n\t\S]+')] = Field(
        None,
        description='Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.',
        title='Unique id for inter-element referencing',
    )
    links: Optional[List[Link]] = None
    offset: Optional[conint(ge=0)] = Field(
        None,
        description='The number of minutes from the event. If the event code does not indicate whether the minutes is before or after the event, then the offset is assumed to be after the event.',
        title='Minutes from event (before or after)',
    )
    period: Optional[float] = Field(
        None,
        description='Indicates the duration of time over which repetitions are to occur; e.g. to express "3 times per day", 3 would be the frequency and "1 day" would be the period. If periodMax is present, this element indicates the lower bound of the allowed range of the period length.',
        title='The duration to which the frequency applies. I.e. Event occurs frequency times per period',
    )
    periodMax: Optional[float] = Field(
        None,
        description='If present, indicates that the period is a range from [period] to [periodMax], allowing expressing concepts such as "do this once every 3-5 days.',
        title='Upper limit of period (3-4 hours)',
    )
    periodUnit: Optional[constr(pattern=r'^[^\s]+(\s[^\s]+)*$')] = Field(
        None,
        description="The units of time for the period in UCUM units Normal practice is to use the 'mo' code as a calendar month when calculating the next occurrence.",
        title='s | min | h | d | wk | mo | a - unit of time (UCUM)',
    )
    resourceType: Literal['TimingRepeat'] = Field(
        'TimingRepeat',
        description='One of the resource types defined as part of FHIR',
        title='Resource Type',
    )
    timeOfDay: Optional[List[time]] = Field(
        None,
        description='Specified time of day for action to take place.',
        title='Time of day for action',
    )
    when: Optional[List[constr(pattern=r'^[^\s]+(\s[^\s]+)*$')]] = Field(
        None,
        description='An approximate time period during the day, potentially linked to an event of daily living that indicates when the action should occur.',
        title='Code for time period of occurrence',
    )


class Expression(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    field_description: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_description', title='Extension field for ``description``.'
    )
    field_expression: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_expression', title='Extension field for ``expression``.'
    )
    field_language: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_language', title='Extension field for ``language``.'
    )
    field_name: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_name', title='Extension field for ``name``.'
    )
    field_reference: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_reference', title='Extension field for ``reference``.'
    )
    description: Optional[constr(pattern=r'[ \r\n\t\S]+')] = Field(
        None,
        description='A brief, natural language description of the condition that effectively communicates the intended semantics.',
        title='Natural language description of the condition',
    )
    expression: Optional[constr(pattern=r'[ \r\n\t\S]+')] = Field(
        None,
        description='An expression in the specified language that returns a value.',
        title='Expression in specified language',
    )
    extension: Optional[List[Extension]] = Field(
        None,
        description='May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.',
        title='Additional content defined by implementations',
    )
    fhir_comments: Optional[Union[str, List[str]]] = Field(None, title='Fhir Comments')
    id: Optional[constr(pattern=r'[ \r\n\t\S]+')] = Field(
        None,
        description='Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.',
        title='Unique id for inter-element referencing',
    )
    language: Optional[constr(pattern=r'^[^\s]+(\s[^\s]+)*$')] = Field(
        None,
        description='The media type of the language for the expression.',
        title='text/cql | text/fhirpath | application/x-fhir-query | etc.',
    )
    links: Optional[List[Link]] = None
    name: Optional[constr(pattern=r'^[^\s]+(\s[^\s]+)*$')] = Field(
        None,
        description='A short name assigned to the expression to allow for multiple reuse of the expression in the context where it is defined.',
        title='Short name assigned to expression for reuse',
    )
    reference: Optional[constr(pattern=r'\S*')] = Field(
        None,
        description='A URI that defines where the expression is found.',
        title='Where the expression is found',
    )
    resourceType: Literal['Expression'] = Field(
        'Expression',
        description='One of the resource types defined as part of FHIR',
        title='Resource Type',
    )


class ExtendedContactDetail(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    address: Optional[Address] = Field(None, title='Address for the contact')
    extension: Optional[List[Extension]] = Field(
        None,
        description='May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.',
        title='Additional content defined by implementations',
    )
    fhir_comments: Optional[Union[str, List[str]]] = Field(None, title='Fhir Comments')
    id: Optional[constr(pattern=r'[ \r\n\t\S]+')] = Field(
        None,
        description='Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.',
        title='Unique id for inter-element referencing',
    )
    links: Optional[List[Link]] = None
    name: Optional[List[HumanName]] = Field(
        None,
        description='The name of an individual to contact, some types of contact detail are usually blank.',
        title='Name of an individual to contact',
    )
    organization: Optional[Reference] = Field(
        None,
        description='This contact detail is handled/monitored by a specific organization. If the name is provided in the contact, then it is referring to the named individual within this organization.',
        title='This contact detail is handled/monitored by a specific organization',
    )
    period: Optional[Period] = Field(
        None, title='Period that this contact was valid for usage'
    )
    purpose: Optional[CodeableConcept] = Field(
        None, description='The purpose/type of contact.', title='The type of contact'
    )
    resourceType: Literal['ExtendedContactDetail'] = Field(
        'ExtendedContactDetail',
        description='One of the resource types defined as part of FHIR',
        title='Resource Type',
    )
    telecom: Optional[List[ContactPoint]] = Field(
        None,
        description='The contact details application for the purpose defined.',
        title='Contact details (e.g.phone/fax/url)',
    )


class HumanName(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    field_family: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_family', title='Extension field for ``family``.'
    )
    field_given: Optional[List[FHIRPrimitiveExtension]] = Field(
        None, alias='_given', title='Extension field for ``given``.'
    )
    field_prefix: Optional[List[FHIRPrimitiveExtension]] = Field(
        None, alias='_prefix', title='Extension field for ``prefix``.'
    )
    field_suffix: Optional[List[FHIRPrimitiveExtension]] = Field(
        None, alias='_suffix', title='Extension field for ``suffix``.'
    )
    field_text: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_text', title='Extension field for ``text``.'
    )
    field_use: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_use', title='Extension field for ``use``.'
    )
    extension: Optional[List[Extension]] = Field(
        None,
        description='May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.',
        title='Additional content defined by implementations',
    )
    family: Optional[constr(pattern=r'[ \r\n\t\S]+')] = Field(
        None,
        description='The part of a name that links to the genealogy. In some cultures (e.g. Eritrea) the family name of a son is the first name of his father.',
        title="Family name (often called 'Surname')",
    )
    fhir_comments: Optional[Union[str, List[str]]] = Field(None, title='Fhir Comments')
    given: Optional[List[constr(pattern=r'[ \r\n\t\S]+')]] = Field(
        None,
        description='Given name.',
        title="Given names (not always 'first'). Includes middle names",
    )
    id: Optional[constr(pattern=r'[ \r\n\t\S]+')] = Field(
        None,
        description='Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.',
        title='Unique id for inter-element referencing',
    )
    links: Optional[List[Link]] = None
    period: Optional[Period] = Field(
        None,
        description='Indicates the period of time when this name was valid for the named person.',
        title='Time period when name was/is in use',
    )
    prefix: Optional[List[constr(pattern=r'[ \r\n\t\S]+')]] = Field(
        None,
        description='Part of the name that is acquired as a title due to academic, legal, employment or nobility status, etc. and that appears at the start of the name.',
        title='Parts that come before the name',
    )
    resourceType: Literal['HumanName'] = Field(
        'HumanName',
        description='One of the resource types defined as part of FHIR',
        title='Resource Type',
    )
    suffix: Optional[List[constr(pattern=r'[ \r\n\t\S]+')]] = Field(
        None,
        description='Part of the name that is acquired as a title due to academic, legal, employment or nobility status, etc. and that appears at the end of the name.',
        title='Parts that come after the name',
    )
    text: Optional[constr(pattern=r'[ \r\n\t\S]+')] = Field(
        None,
        description='Specifies the entire name as it should be displayed e.g. on an application UI. This may be provided instead of or as well as the specific parts.',
        title='Text representation of the full name',
    )
    use: Optional[constr(pattern=r'^[^\s]+(\s[^\s]+)*$')] = Field(
        None,
        description='Identifies the purpose for this name.',
        title='usual | official | temp | nickname | anonymous | old | maiden',
    )


class Meta(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    field_lastUpdated: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_lastUpdated', title='Extension field for ``lastUpdated``.'
    )
    field_profile: Optional[List[FHIRPrimitiveExtension]] = Field(
        None, alias='_profile', title='Extension field for ``profile``.'
    )
    field_source: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_source', title='Extension field for ``source``.'
    )
    field_versionId: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_versionId', title='Extension field for ``versionId``.'
    )
    extension: Optional[List[Extension]] = Field(
        None,
        description='May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.',
        title='Additional content defined by implementations',
    )
    fhir_comments: Optional[Union[str, List[str]]] = Field(None, title='Fhir Comments')
    id: Optional[constr(pattern=r'[ \r\n\t\S]+')] = Field(
        None,
        description='Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.',
        title='Unique id for inter-element referencing',
    )
    lastUpdated: Optional[AwareDatetime] = Field(
        None,
        description='When the resource last changed - e.g. when the version changed.',
        title='When the resource version last changed',
    )
    links: Optional[List[Link]] = None
    profile: Optional[List[constr(pattern=r'\S*')]] = Field(
        None,
        description='A list of profiles (references to [StructureDefinition](structuredefinition.html#) resources) that this resource claims to conform to. The URL is a reference to [StructureDefinition.url](structuredefinition-definitions.html#StructureDefinition.url).',
        title='Profiles this resource claims to conform to',
    )
    resourceType: Literal['Meta'] = Field(
        'Meta',
        description='One of the resource types defined as part of FHIR',
        title='Resource Type',
    )
    security: Optional[List[Coding]] = Field(
        None,
        description='Security labels applied to this resource. These tags connect specific resources to the overall security policy and infrastructure.',
        title='Security Labels applied to this resource',
    )
    source: Optional[constr(pattern=r'\S*')] = Field(
        None,
        description='A uri that identifies the source system of the resource. This provides a minimal amount of [Provenance](provenance.html#) information that can be used to track or differentiate the source of information in the resource. The source may identify another FHIR server, document, message, database, etc.',
        title='Identifies where the resource comes from',
    )
    tag: Optional[List[Coding]] = Field(
        None,
        description='Tags applied to this resource. Tags are intended to be used to identify and relate resources to process and workflow, and applications are not required to consider the tags when interpreting the meaning of a resource.',
        title='Tags applied to this resource',
    )
    versionId: Optional[
        constr(pattern=r'^[A-Za-z0-9\-.]+$', min_length=1, max_length=64)
    ] = Field(
        None,
        description='The version specific identifier, as it appears in the version portion of the URL. This value changes when the resource is created, updated, or deleted.',
        title='Version specific identifier',
    )


class Money(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    field_currency: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_currency', title='Extension field for ``currency``.'
    )
    field_value: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_value', title='Extension field for ``value``.'
    )
    currency: Optional[constr(pattern=r'^[^\s]+(\s[^\s]+)*$')] = Field(
        None, title='ISO 4217 Currency Code'
    )
    extension: Optional[List[Extension]] = Field(
        None,
        description='May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.',
        title='Additional content defined by implementations',
    )
    fhir_comments: Optional[Union[str, List[str]]] = Field(None, title='Fhir Comments')
    id: Optional[constr(pattern=r'[ \r\n\t\S]+')] = Field(
        None,
        description='Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.',
        title='Unique id for inter-element referencing',
    )
    links: Optional[List[Link]] = None
    resourceType: Literal['Money'] = Field(
        'Money',
        description='One of the resource types defined as part of FHIR',
        title='Resource Type',
    )
    value: Optional[float] = Field(
        None, title='Numerical value (with implicit precision)'
    )


class ParameterDefinition(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    field_documentation: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_documentation', title='Extension field for ``documentation``.'
    )
    field_max: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_max', title='Extension field for ``max``.'
    )
    field_min: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_min', title='Extension field for ``min``.'
    )
    field_name: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_name', title='Extension field for ``name``.'
    )
    field_profile: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_profile', title='Extension field for ``profile``.'
    )
    field_type: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_type', title='Extension field for ``type``.'
    )
    field_use: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_use', title='Extension field for ``use``.'
    )
    documentation: Optional[constr(pattern=r'[ \r\n\t\S]+')] = Field(
        None,
        description='A brief discussion of what the parameter is for and how it is used by the module.',
        title='A brief description of the parameter',
    )
    extension: Optional[List[Extension]] = Field(
        None,
        description='May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.',
        title='Additional content defined by implementations',
    )
    fhir_comments: Optional[Union[str, List[str]]] = Field(None, title='Fhir Comments')
    id: Optional[constr(pattern=r'[ \r\n\t\S]+')] = Field(
        None,
        description='Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.',
        title='Unique id for inter-element referencing',
    )
    links: Optional[List[Link]] = None
    max: Optional[constr(pattern=r'[ \r\n\t\S]+')] = Field(
        None,
        description='The maximum number of times this element is permitted to appear in the request or response.',
        title='Maximum cardinality (a number of *)',
    )
    min: Optional[int] = Field(
        None,
        description='The minimum number of times this parameter SHALL appear in the request or response.',
        title='Minimum cardinality',
    )
    name: Optional[constr(pattern=r'^[^\s]+(\s[^\s]+)*$')] = Field(
        None,
        description='The name of the parameter used to allow access to the value of the parameter in evaluation contexts.',
        title='Name used to access the parameter value',
    )
    profile: Optional[constr(pattern=r'\S*')] = Field(
        None,
        description='If specified, this indicates a profile that the input data must conform to, or that the output data will conform to.',
        title='What profile the value is expected to be',
    )
    resourceType: Literal['ParameterDefinition'] = Field(
        'ParameterDefinition',
        description='One of the resource types defined as part of FHIR',
        title='Resource Type',
    )
    type: Optional[constr(pattern=r'^[^\s]+(\s[^\s]+)*$')] = Field(
        None, description='The type of the parameter.', title='What type of value'
    )
    use: Optional[constr(pattern=r'^[^\s]+(\s[^\s]+)*$')] = Field(
        None,
        description='Whether the parameter is input or output for the module.',
        title='in | out',
    )


class RatioRange(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    denominator: Optional[Quantity] = Field(
        None, description='The value of the denominator.', title='Denominator value'
    )
    extension: Optional[List[Extension]] = Field(
        None,
        description='May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.',
        title='Additional content defined by implementations',
    )
    fhir_comments: Optional[Union[str, List[str]]] = Field(None, title='Fhir Comments')
    highNumerator: Optional[Quantity] = Field(
        None,
        description='The value of the high limit numerator.',
        title='High Numerator limit',
    )
    id: Optional[constr(pattern=r'[ \r\n\t\S]+')] = Field(
        None,
        description='Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.',
        title='Unique id for inter-element referencing',
    )
    links: Optional[List[Link]] = None
    lowNumerator: Optional[Quantity] = Field(
        None,
        description='The value of the low limit numerator.',
        title='Low Numerator limit',
    )
    resourceType: Literal['RatioRange'] = Field(
        'RatioRange',
        description='One of the resource types defined as part of FHIR',
        title='Resource Type',
    )


class RelatedArtifact(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    field_citation: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_citation', title='Extension field for ``citation``.'
    )
    field_display: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_display', title='Extension field for ``display``.'
    )
    field_label: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_label', title='Extension field for ``label``.'
    )
    field_publicationDate: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_publicationDate', title='Extension field for ``publicationDate``.'
    )
    field_publicationStatus: Optional[FHIRPrimitiveExtension] = Field(
        None,
        alias='_publicationStatus',
        title='Extension field for ``publicationStatus``.',
    )
    field_resource: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_resource', title='Extension field for ``resource``.'
    )
    field_type: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_type', title='Extension field for ``type``.'
    )
    citation: Optional[constr(pattern=r'\s*(\S|\s)*')] = Field(
        None,
        description='A bibliographic citation for the related artifact. This text SHOULD be formatted according to an accepted citation format.',
        title='Bibliographic citation for the artifact',
    )
    classifier: Optional[List[CodeableConcept]] = Field(
        None,
        description='Provides additional classifiers of the related artifact.',
        title='Additional classifiers',
    )
    display: Optional[constr(pattern=r'[ \r\n\t\S]+')] = Field(
        None,
        description='A brief description of the document or knowledge resource being referenced, suitable for display to a consumer.',
        title='Brief description of the related artifact',
    )
    document: Optional[Attachment] = Field(
        None,
        description='The document being referenced, represented as an attachment. This is exclusive with the resource element.',
        title='What document is being referenced',
    )
    extension: Optional[List[Extension]] = Field(
        None,
        description='May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.',
        title='Additional content defined by implementations',
    )
    fhir_comments: Optional[Union[str, List[str]]] = Field(None, title='Fhir Comments')
    id: Optional[constr(pattern=r'[ \r\n\t\S]+')] = Field(
        None,
        description='Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.',
        title='Unique id for inter-element referencing',
    )
    label: Optional[constr(pattern=r'[ \r\n\t\S]+')] = Field(
        None,
        description='A short label that can be used to reference the citation from elsewhere in the containing artifact, such as a footnote index.',
        title='Short label',
    )
    links: Optional[List[Link]] = None
    publicationDate: Optional[date] = Field(
        None,
        description='The date of publication of the artifact being referred to.',
        title='Date of publication of the artifact being referred to',
    )
    publicationStatus: Optional[constr(pattern=r'^[^\s]+(\s[^\s]+)*$')] = Field(
        None,
        description='The publication status of the artifact being referred to.',
        title='draft | active | retired | unknown',
    )
    resource: Optional[constr(pattern=r'\S*')] = Field(
        None,
        description='The related artifact, such as a library, value set, profile, or other knowledge resource.',
        title='What artifact is being referenced',
    )
    resourceReference: Optional[Reference] = Field(
        None,
        description='The related artifact, if the artifact is not a canonical resource, or a resource reference to a canonical resource.',
        title='What artifact, if not a conformance resource',
    )
    resourceType: Literal['RelatedArtifact'] = Field(
        'RelatedArtifact',
        description='One of the resource types defined as part of FHIR',
        title='Resource Type',
    )
    type: Optional[constr(pattern=r'^[^\s]+(\s[^\s]+)*$')] = Field(
        None,
        description='The type of relationship to the related artifact.',
        title='documentation | justification | citation | predecessor | successor | derived-from | depends-on | composed-of | part-of | amends | amended-with | appends | appended-with | cites | cited-by | comments-on | comment-in | contains | contained-in | corrects | correction-in | replaces | replaced-with | retracts | retracted-by | signs | similar-to | supports | supported-with | transforms | transformed-into | transformed-with | documents | specification-of | created-with | cite-as',
    )


class SampledData(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    field_codeMap: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_codeMap', title='Extension field for ``codeMap``.'
    )
    field_data: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_data', title='Extension field for ``data``.'
    )
    field_dimensions: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_dimensions', title='Extension field for ``dimensions``.'
    )
    field_factor: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_factor', title='Extension field for ``factor``.'
    )
    field_interval: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_interval', title='Extension field for ``interval``.'
    )
    field_intervalUnit: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_intervalUnit', title='Extension field for ``intervalUnit``.'
    )
    field_lowerLimit: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_lowerLimit', title='Extension field for ``lowerLimit``.'
    )
    field_offsets: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_offsets', title='Extension field for ``offsets``.'
    )
    field_upperLimit: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_upperLimit', title='Extension field for ``upperLimit``.'
    )
    codeMap: Optional[constr(pattern=r'\S*')] = Field(
        None,
        description='Reference to ConceptMap that defines the codes used in the data.',
        title='Defines the codes used in the data',
    )
    data: Optional[constr(pattern=r'[ \r\n\t\S]+')] = Field(
        None,
        description='A series of data points which are decimal values or codes separated by a single space (character u20). The special codes "E" (error), "L" (below detection limit) and "U" (above detection limit) are also defined for used in place of decimal values.',
        title='Decimal values with spaces, or "E" | "U" | "L", or another code',
    )
    dimensions: Optional[PositiveInt] = Field(
        None,
        description='The number of sample points at each time point. If this value is greater than one, then the dimensions will be interlaced - all the sample points for a point in time will be recorded at once.',
        title='Number of sample points at each time point',
    )
    extension: Optional[List[Extension]] = Field(
        None,
        description='May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.',
        title='Additional content defined by implementations',
    )
    factor: Optional[float] = Field(
        None,
        description='A correction factor that is applied to the sampled data points before they are added to the origin.',
        title='Multiply data by this before adding to origin',
    )
    fhir_comments: Optional[Union[str, List[str]]] = Field(None, title='Fhir Comments')
    id: Optional[constr(pattern=r'[ \r\n\t\S]+')] = Field(
        None,
        description='Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.',
        title='Unique id for inter-element referencing',
    )
    interval: Optional[float] = Field(
        None,
        description='Amount of intervalUnits between samples, e.g. milliseconds for time-based sampling.',
        title='Number of intervalUnits between samples',
    )
    intervalUnit: Optional[constr(pattern=r'^[^\s]+(\s[^\s]+)*$')] = Field(
        None,
        description='The measurement unit in which the sample interval is expressed.',
        title='The measurement unit of the interval between samples',
    )
    links: Optional[List[Link]] = None
    lowerLimit: Optional[float] = Field(
        None,
        description='The lower limit of detection of the measured points. This is needed if any of the data points have the value "L" (lower than detection limit).',
        title='Lower limit of detection',
    )
    offsets: Optional[constr(pattern=r'[ \r\n\t\S]+')] = Field(
        None,
        description='A series of data points which are decimal values separated by a single space (character u20).  The units in which the offsets are expressed are found in intervalUnit.  The absolute point at which the measurements begin SHALL be conveyed outside the scope of this datatype, e.g. Observation.effectiveDateTime for a timing offset.',
        title='Offsets, typically in time, at which data values were taken',
    )
    origin: Quantity = Field(
        ...,
        description='The base quantity that a measured value of zero represents. In addition, this provides the units of the entire measurement series.',
        title='Zero value and units',
    )
    resourceType: Literal['SampledData'] = Field(
        'SampledData',
        description='One of the resource types defined as part of FHIR',
        title='Resource Type',
    )
    upperLimit: Optional[float] = Field(
        None,
        description='The upper limit of detection of the measured points. This is needed if any of the data points have the value "U" (higher than detection limit).',
        title='Upper limit of detection',
    )


class Signature(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    field_data: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_data', title='Extension field for ``data``.'
    )
    field_sigFormat: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_sigFormat', title='Extension field for ``sigFormat``.'
    )
    field_targetFormat: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_targetFormat', title='Extension field for ``targetFormat``.'
    )
    field_when: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_when', title='Extension field for ``when``.'
    )
    data: Optional[bytes] = Field(
        None,
        description='The base64 encoding of the Signature content. When signature is not recorded electronically this element would be empty.',
        title='The actual signature content (XML DigSig. JWS, picture, etc.)',
    )
    extension: Optional[List[Extension]] = Field(
        None,
        description='May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.',
        title='Additional content defined by implementations',
    )
    fhir_comments: Optional[Union[str, List[str]]] = Field(None, title='Fhir Comments')
    id: Optional[constr(pattern=r'[ \r\n\t\S]+')] = Field(
        None,
        description='Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.',
        title='Unique id for inter-element referencing',
    )
    links: Optional[List[Link]] = None
    onBehalfOf: Optional[Reference] = Field(
        None,
        description='A reference to an application-usable description of the identity that is represented by the signature.',
        title='The party represented',
    )
    resourceType: Literal['Signature'] = Field(
        'Signature',
        description='One of the resource types defined as part of FHIR',
        title='Resource Type',
    )
    sigFormat: Optional[constr(pattern=r'^[^\s]+(\s[^\s]+)*$')] = Field(
        None,
        description='A mime type that indicates the technical format of the signature. Important mime types are application/signature+xml for X ML DigSig, application/jose for JWS, and image/* for a graphical image of a signature, etc.',
        title='The technical format of the signature',
    )
    targetFormat: Optional[constr(pattern=r'^[^\s]+(\s[^\s]+)*$')] = Field(
        None,
        description='A mime type that indicates the technical format of the target resources signed by the signature.',
        title='The technical format of the signed resources',
    )
    type: Optional[List[Coding]] = Field(
        None,
        description='An indication of the reason that the entity signed this document. This may be explicitly included as part of the signature information and can be used when determining accountability for various actions concerning the document.',
        title='Indication of the reason the entity signed the object(s)',
    )
    when: Optional[AwareDatetime] = Field(
        None,
        description='When the digital signature was signed.',
        title='When the signature was created',
    )
    who: Optional[Reference] = Field(
        None,
        description='A reference to an application-usable description of the identity that signed  (e.g. the signature used their private key).',
        title='Who signed',
    )


class TriggerDefinition(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    field_name: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_name', title='Extension field for ``name``.'
    )
    field_subscriptionTopic: Optional[FHIRPrimitiveExtension] = Field(
        None,
        alias='_subscriptionTopic',
        title='Extension field for ``subscriptionTopic``.',
    )
    field_timingDate: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_timingDate', title='Extension field for ``timingDate``.'
    )
    field_timingDateTime: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_timingDateTime', title='Extension field for ``timingDateTime``.'
    )
    field_type: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_type', title='Extension field for ``type``.'
    )
    code: Optional[CodeableConcept] = Field(
        None,
        description='A code that identifies the event.',
        title='Coded definition of the event',
    )
    condition: Optional[Expression] = Field(
        None,
        description='A boolean-valued expression that is evaluated in the context of the container of the trigger definition and returns whether or not the trigger fires.',
        title='Whether the event triggers (boolean expression)',
    )
    data: Optional[List[DataRequirement]] = Field(
        None,
        description='The triggering data of the event (if this is a data trigger). If more than one data is requirement is specified, then all the data requirements must be true.',
        title="Triggering data of the event (multiple = 'and')",
    )
    extension: Optional[List[Extension]] = Field(
        None,
        description='May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.',
        title='Additional content defined by implementations',
    )
    fhir_comments: Optional[Union[str, List[str]]] = Field(None, title='Fhir Comments')
    id: Optional[constr(pattern=r'[ \r\n\t\S]+')] = Field(
        None,
        description='Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.',
        title='Unique id for inter-element referencing',
    )
    links: Optional[List[Link]] = None
    name: Optional[constr(pattern=r'[ \r\n\t\S]+')] = Field(
        None,
        description='A formal name for the event. This may be an absolute URI that identifies the event formally (e.g. from a trigger registry), or a simple relative URI that identifies the event in a local context.',
        title='Name or URI that identifies the event',
    )
    resourceType: Literal['TriggerDefinition'] = Field(
        'TriggerDefinition',
        description='One of the resource types defined as part of FHIR',
        title='Resource Type',
    )
    subscriptionTopic: Optional[constr(pattern=r'\S*')] = Field(
        None,
        description='A reference to a SubscriptionTopic resource that defines the event. If this element is provided, no other information about the trigger definition may be supplied.',
        title='What event',
    )
    timingDate: Optional[date] = Field(
        None,
        description='The timing of the event (if this is a periodic trigger).',
        title='Timing of the event',
    )
    timingDateTime: Optional[AwareDatetime] = Field(
        None,
        description='The timing of the event (if this is a periodic trigger).',
        title='Timing of the event',
    )
    timingReference: Optional[Reference] = Field(
        None,
        description='The timing of the event (if this is a periodic trigger).',
        title='Timing of the event',
    )
    timingTiming: Optional[Timing] = Field(
        None,
        description='The timing of the event (if this is a periodic trigger).',
        title='Timing of the event',
    )
    type: Optional[constr(pattern=r'^[^\s]+(\s[^\s]+)*$')] = Field(
        None,
        description='The type of triggering event.',
        title='named-event | periodic | data-changed | data-added | data-modified | data-removed | data-accessed | data-access-ended',
    )


class UsageContext(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    code: Coding = Field(
        ...,
        description='A code that identifies the type of context being specified by this usage context.',
        title='Type of context being specified',
    )
    extension: Optional[List[Extension]] = Field(
        None,
        description='May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.',
        title='Additional content defined by implementations',
    )
    fhir_comments: Optional[Union[str, List[str]]] = Field(None, title='Fhir Comments')
    id: Optional[constr(pattern=r'[ \r\n\t\S]+')] = Field(
        None,
        description='Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.',
        title='Unique id for inter-element referencing',
    )
    links: Optional[List[Link]] = None
    resourceType: Literal['UsageContext'] = Field(
        'UsageContext',
        description='One of the resource types defined as part of FHIR',
        title='Resource Type',
    )
    valueCodeableConcept: Optional[CodeableConcept] = Field(
        None,
        description='A value that defines the context specified in this context of use. The interpretation of the value is defined by the code.',
        title='Value that defines the context',
    )
    valueQuantity: Optional[Quantity] = Field(
        None,
        description='A value that defines the context specified in this context of use. The interpretation of the value is defined by the code.',
        title='Value that defines the context',
    )
    valueRange: Optional[Range] = Field(
        None,
        description='A value that defines the context specified in this context of use. The interpretation of the value is defined by the code.',
        title='Value that defines the context',
    )
    valueReference: Optional[Reference] = Field(
        None,
        description='A value that defines the context specified in this context of use. The interpretation of the value is defined by the code.',
        title='Value that defines the context',
    )


class PatientCommunication(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    field_preferred: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_preferred', title='Extension field for ``preferred``.'
    )
    extension: Optional[List[Extension]] = Field(
        None,
        description='May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.',
        title='Additional content defined by implementations',
    )
    fhir_comments: Optional[Union[str, List[str]]] = Field(None, title='Fhir Comments')
    id: Optional[constr(pattern=r'[ \r\n\t\S]+')] = Field(
        None,
        description='Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.',
        title='Unique id for inter-element referencing',
    )
    language: CodeableConcept = Field(
        ...,
        description='The ISO-639-1 alpha 2 code in lower case for the language, optionally followed by a hyphen and the ISO-3166-1 alpha 2 code for the region in upper case; e.g. "en" for English, or "en-US" for American English versus "en-AU" for Australian English.',
        title='The language which can be used to communicate with the patient about his or her health',
    )
    links: Optional[List[Link]] = None
    modifierExtension: Optional[List[Extension]] = Field(
        None,
        description="May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
        title='Extensions that cannot be ignored even if unrecognized',
    )
    preferred: Optional[bool] = Field(
        None,
        description='Indicates whether or not the patient prefers this language (over other languages he masters up a certain level).',
        title='Language preference indicator',
    )
    resourceType: Literal['PatientCommunication'] = Field(
        'PatientCommunication',
        description='One of the resource types defined as part of FHIR',
        title='Resource Type',
    )


class PatientContact(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    field_gender: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_gender', title='Extension field for ``gender``.'
    )
    address: Optional[Address] = Field(None, title='Address for the contact person')
    extension: Optional[List[Extension]] = Field(
        None,
        description='May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.',
        title='Additional content defined by implementations',
    )
    fhir_comments: Optional[Union[str, List[str]]] = Field(None, title='Fhir Comments')
    gender: Optional[constr(pattern=r'^[^\s]+(\s[^\s]+)*$')] = Field(
        None,
        description='Administrative Gender - the gender that the contact person is considered to have for administration and record keeping purposes.',
        title='male | female | other | unknown',
    )
    id: Optional[constr(pattern=r'[ \r\n\t\S]+')] = Field(
        None,
        description='Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.',
        title='Unique id for inter-element referencing',
    )
    links: Optional[List[Link]] = None
    modifierExtension: Optional[List[Extension]] = Field(
        None,
        description="May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
        title='Extensions that cannot be ignored even if unrecognized',
    )
    name: Optional[HumanName] = Field(
        None, title='A name associated with the contact person'
    )
    organization: Optional[Reference] = Field(
        None,
        description='Organization on behalf of which the contact is acting or for which the contact is working.',
        title='Organization that is associated with the contact',
    )
    period: Optional[Period] = Field(
        None,
        title='The period during which this contact person or organization is valid to be contacted relating to this patient',
    )
    relationship: Optional[List[CodeableConcept]] = Field(
        None,
        description='The nature of the relationship between the patient and the contact person.',
        title='The kind of relationship',
    )
    resourceType: Literal['PatientContact'] = Field(
        'PatientContact',
        description='One of the resource types defined as part of FHIR',
        title='Resource Type',
    )
    telecom: Optional[List[ContactPoint]] = Field(
        None,
        description='A contact detail for the person, e.g. a telephone number or an email address.',
        title='A contact detail for the person',
    )


class Resource(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    field_implicitRules: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_implicitRules', title='Extension field for ``implicitRules``.'
    )
    field_language: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_language', title='Extension field for ``language``.'
    )
    fhir_comments: Optional[Union[str, List[str]]] = Field(None, title='Fhir Comments')
    id: Optional[
        constr(pattern=r'^[A-Za-z0-9\-.]+$', min_length=1, max_length=64)
    ] = Field(
        None,
        description='The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.',
        title='Logical id of this artifact',
    )
    implicitRules: Optional[constr(pattern=r'\S*')] = Field(
        None,
        description='A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.',
        title='A set of rules under which this content was created',
    )
    language: Optional[constr(pattern=r'^[^\s]+(\s[^\s]+)*$')] = Field(
        None,
        description='The base language in which the resource is written.',
        title='Language of the resource content',
    )
    links: Optional[List[Link]] = None
    meta: Optional[Meta] = Field(
        None,
        description='The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.',
        title='Metadata about the resource',
    )
    resourceType: Literal['Resource'] = Field(
        'Resource',
        description='One of the resource types defined as part of FHIR',
        title='Resource Type',
    )


class PatientLink(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    field_type: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_type', title='Extension field for ``type``.'
    )
    extension: Optional[List[Extension]] = Field(
        None,
        description='May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.',
        title='Additional content defined by implementations',
    )
    fhir_comments: Optional[Union[str, List[str]]] = Field(None, title='Fhir Comments')
    id: Optional[constr(pattern=r'[ \r\n\t\S]+')] = Field(
        None,
        description='Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.',
        title='Unique id for inter-element referencing',
    )
    links: Optional[List[Link]] = None
    modifierExtension: Optional[List[Extension]] = Field(
        None,
        description="May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
        title='Extensions that cannot be ignored even if unrecognized',
    )
    other: Reference = Field(
        ...,
        description='Link to a Patient or RelatedPerson resource that concerns the same actual individual.',
        title='The other patient or related person resource that the link refers to',
    )
    resourceType: Literal['PatientLink'] = Field(
        'PatientLink',
        description='One of the resource types defined as part of FHIR',
        title='Resource Type',
    )
    type: Optional[constr(pattern=r'^[^\s]+(\s[^\s]+)*$')] = Field(
        None,
        description='The type of link between this patient resource and another patient resource.',
        title='replaced-by | replaces | refer | seealso',
    )


class Substance(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    field_description: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_description', title='Extension field for ``description``.'
    )
    field_expiry: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_expiry', title='Extension field for ``expiry``.'
    )
    field_implicitRules: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_implicitRules', title='Extension field for ``implicitRules``.'
    )
    field_instance: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_instance', title='Extension field for ``instance``.'
    )
    field_language: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_language', title='Extension field for ``language``.'
    )
    field_status: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_status', title='Extension field for ``status``.'
    )
    category: Optional[List[CodeableConcept]] = Field(
        None,
        description='A code that classifies the general type of substance.  This is used  for searching, sorting and display purposes.',
        title='What class/type of substance this is',
    )
    code: CodeableReference = Field(
        ...,
        description='A code (or set of codes) that identify this substance.',
        title='What substance this is',
    )
    contained: Optional[List[Resource]] = Field(
        None,
        description='These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.',
        title='Contained, inline Resources',
    )
    description: Optional[constr(pattern=r'\s*(\S|\s)*')] = Field(
        None,
        description='A description of the substance - its appearance, handling requirements, and other usage notes.',
        title='Textual description of the substance, comments',
    )
    expiry: Optional[AwareDatetime] = Field(
        None,
        description='When the substance is no longer valid to use. For some substances, a single arbitrary date is used for expiry.',
        title='When no longer valid to use',
    )
    extension: Optional[List[Extension]] = Field(
        None,
        description='May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.',
        title='Additional content defined by implementations',
    )
    fhir_comments: Optional[Union[str, List[str]]] = Field(None, title='Fhir Comments')
    id: Optional[
        constr(pattern=r'^[A-Za-z0-9\-.]+$', min_length=1, max_length=64)
    ] = Field(
        None,
        description='The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.',
        title='Logical id of this artifact',
    )
    identifier: Optional[List[Identifier]] = Field(
        None,
        description='Unique identifier for the substance. For an instance, an identifier associated with the package/container (usually a label affixed directly).',
        title='Unique identifier',
    )
    implicitRules: Optional[constr(pattern=r'\S*')] = Field(
        None,
        description='A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.',
        title='A set of rules under which this content was created',
    )
    ingredient: Optional[List[SubstanceIngredient]] = Field(
        None,
        description='A substance can be composed of other substances.',
        title='Composition information about the substance',
    )
    instance: Optional[bool] = Field(
        None,
        description='A boolean to indicate if this an instance of a substance or a kind of one (a definition).',
        title='Is this an instance of a substance or a kind of one',
    )
    language: Optional[constr(pattern=r'^[^\s]+(\s[^\s]+)*$')] = Field(
        None,
        description='The base language in which the resource is written.',
        title='Language of the resource content',
    )
    links: Optional[List[Link]] = None
    meta: Optional[Meta] = Field(
        None,
        description='The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.',
        title='Metadata about the resource',
    )
    modifierExtension: Optional[List[Extension]] = Field(
        None,
        description="May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
        title='Extensions that cannot be ignored',
    )
    projects: Optional[List[ResearchStudy]] = None
    quantity: Optional[Quantity] = Field(
        None,
        description='The amount of the substance.',
        title='Amount of substance in the package',
    )
    resourceType: Literal['Substance'] = Field(
        'Substance',
        description='One of the resource types defined as part of FHIR',
        title='Resource Type',
    )
    status: Optional[constr(pattern=r'^[^\s]+(\s[^\s]+)*$')] = Field(
        None,
        description='A code to indicate if the substance is actively used.',
        title='active | inactive | entered-in-error',
    )
    text: Optional[Narrative] = Field(
        None,
        description='A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.',
        title='Text summary of the resource, for human interpretation',
    )


class SubstanceIngredient(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    extension: Optional[List[Extension]] = Field(
        None,
        description='May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.',
        title='Additional content defined by implementations',
    )
    fhir_comments: Optional[Union[str, List[str]]] = Field(None, title='Fhir Comments')
    id: Optional[constr(pattern=r'[ \r\n\t\S]+')] = Field(
        None,
        description='Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.',
        title='Unique id for inter-element referencing',
    )
    links: Optional[List[Link]] = None
    modifierExtension: Optional[List[Extension]] = Field(
        None,
        description="May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
        title='Extensions that cannot be ignored even if unrecognized',
    )
    quantity: Optional[Ratio] = Field(
        None,
        description='The amount of the ingredient in the substance - a concentration ratio.',
        title='Optional amount (concentration)',
    )
    resourceType: Literal['SubstanceIngredient'] = Field(
        'SubstanceIngredient',
        description='One of the resource types defined as part of FHIR',
        title='Resource Type',
    )
    substanceCodeableConcept: Optional[CodeableConcept] = Field(
        None,
        description='Another substance that is a component of this substance.',
        title='A component of the substance',
    )
    substanceReference: Optional[Reference] = Field(
        None,
        description='Another substance that is a component of this substance.',
        title='A component of the substance',
    )


class ResearchStudy(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    field_date: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_date', title='Extension field for ``date``.'
    )
    field_description: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_description', title='Extension field for ``description``.'
    )
    field_descriptionSummary: Optional[FHIRPrimitiveExtension] = Field(
        None,
        alias='_descriptionSummary',
        title='Extension field for ``descriptionSummary``.',
    )
    field_implicitRules: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_implicitRules', title='Extension field for ``implicitRules``.'
    )
    field_language: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_language', title='Extension field for ``language``.'
    )
    field_name: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_name', title='Extension field for ``name``.'
    )
    field_status: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_status', title='Extension field for ``status``.'
    )
    field_title: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_title', title='Extension field for ``title``.'
    )
    field_url: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_url', title='Extension field for ``url``.'
    )
    field_version: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_version', title='Extension field for ``version``.'
    )
    associatedParty: Optional[List[ResearchStudyAssociatedParty]] = Field(
        None, title='Sponsors, collaborators, and other parties'
    )
    classifier: Optional[List[CodeableConcept]] = Field(
        None,
        description='Additional grouping mechanism or categorization of a research study. Example: FDA regulated device, FDA regulated drug, MPG Paragraph 23b (a German legal requirement), IRB-exempt, etc. Implementation Note: do not use the classifier element to support existing semantics that are already supported thru explicit elements in the resource.',
        title='Classification for the study',
    )
    comparisonGroup: Optional[List[ResearchStudyComparisonGroup]] = Field(
        None,
        description='Describes an expected event or sequence of events for one of the subjects of a study. E.g. for a living subject: exposure to drug A, wash-out, exposure to drug B, wash-out, follow-up. E.g. for a stability study: {store sample from lot A at 25 degrees for 1 month}, {store sample from lot A at 40 degrees for 1 month}.',
        title='Defined path through the study for a subject',
    )
    condition: Optional[List[CodeableConcept]] = Field(
        None,
        description='The condition that is the focus of the study.  For example, In a study to examine risk factors for Lupus, might have as an inclusion criterion "healthy volunteer", but the target condition code would be a Lupus SNOMED code.',
        title='Condition being studied',
    )
    contained: Optional[List[Resource]] = Field(
        None,
        description='These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.',
        title='Contained, inline Resources',
    )
    date: Optional[AwareDatetime] = Field(
        None,
        description='The date (and optionally time) when the ResearchStudy Resource was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the ResearchStudy Resource changes.',
        title='Date the resource last changed',
    )
    description: Optional[constr(pattern=r'\s*(\S|\s)*')] = Field(
        None,
        description='A detailed and human-readable narrative of the study. E.g., study abstract.',
        title='Detailed narrative of the study',
    )
    descriptionSummary: Optional[constr(pattern=r'\s*(\S|\s)*')] = Field(
        None,
        description='A brief text for explaining the study.',
        title='Brief text explaining the study',
    )
    extension: Optional[List[Extension]] = Field(
        None,
        description='May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.',
        title='Additional content defined by implementations',
    )
    fhir_comments: Optional[Union[str, List[str]]] = Field(None, title='Fhir Comments')
    focus: Optional[List[CodeableReference]] = Field(
        None,
        description='The medication(s), food(s), therapy(ies), device(s) or other concerns or interventions that the study is seeking to gain more information about.',
        title='Drugs, devices, etc. under study',
    )
    id: Optional[
        constr(pattern=r'^[A-Za-z0-9\-.]+$', min_length=1, max_length=64)
    ] = Field(
        None,
        description='The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.',
        title='Logical id of this artifact',
    )
    identifier: Optional[List[Identifier]] = Field(
        None,
        description='Identifiers assigned to this research study by the sponsor or other systems.',
        title='Business Identifier for study',
    )
    implicitRules: Optional[constr(pattern=r'\S*')] = Field(
        None,
        description='A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.',
        title='A set of rules under which this content was created',
    )
    keyword: Optional[List[CodeableConcept]] = Field(
        None,
        description='Key terms to aid in searching for or filtering the study.',
        title='Used to search for the study',
    )
    label: Optional[List[ResearchStudyLabel]] = Field(
        None, title='Additional names for the study'
    )
    language: Optional[constr(pattern=r'^[^\s]+(\s[^\s]+)*$')] = Field(
        None,
        description='The base language in which the resource is written.',
        title='Language of the resource content',
    )
    links: Optional[List[Link]] = None
    meta: Optional[Meta] = Field(
        None,
        description='The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.',
        title='Metadata about the resource',
    )
    modifierExtension: Optional[List[Extension]] = Field(
        None,
        description="May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
        title='Extensions that cannot be ignored',
    )
    name: Optional[constr(pattern=r'[ \r\n\t\S]+')] = Field(
        None, title='Name for this study (computer friendly)'
    )
    note: Optional[List[Annotation]] = Field(
        None,
        description='Comments made about the study by the performer, subject or other participants.',
        title='Comments made about the study',
    )
    objective: Optional[List[ResearchStudyObjective]] = Field(
        None,
        description='A goal that the study is aiming to achieve in terms of a scientific question to be answered by the analysis of data collected during the study.',
        title='A goal for the study',
    )
    outcomeMeasure: Optional[List[ResearchStudyOutcomeMeasure]] = Field(
        None,
        description='An "outcome measure", "endpoint", "effect measure" or "measure of effect" is a specific measurement or observation used to quantify the effect of experimental variables on the participants in a study, or for observational studies, to describe patterns of diseases or traits or associations with exposures, risk factors or treatment.',
        title='A variable measured during the study',
    )
    partOf: Optional[List[Reference]] = Field(
        None,
        description='A larger research study of which this particular study is a component or step.',
        title='Part of larger study',
    )
    period: Optional[Period] = Field(
        None,
        description='Identifies the start date and the expected (or actual, depending on status) end date for the study.',
        title='When the study began and ended',
    )
    phase: Optional[CodeableConcept] = Field(
        None,
        description='The stage in the progression of a therapy from initial experimental use in humans in clinical trials to post-market evaluation.',
        title='n-a | early-phase-1 | phase-1 | phase-1-phase-2 | phase-2 | phase-2-phase-3 | phase-3 | phase-4',
    )
    primaryPurposeType: Optional[CodeableConcept] = Field(
        None,
        description='The type of study based upon the intent of the study activities. A classification of the intent of the study.',
        title='treatment | prevention | diagnostic | supportive-care | screening | health-services-research | basic-science | device-feasibility',
    )
    progressStatus: Optional[List[ResearchStudyProgressStatus]] = Field(
        None, title='Status of study with time for that status'
    )
    protocol: Optional[List[Reference]] = Field(
        None,
        description='The set of steps expected to be performed as part of the execution of the study.',
        title='Steps followed in executing study',
    )
    recruitment: Optional[ResearchStudyRecruitment] = Field(
        None, title='Target or actual group of participants enrolled in study'
    )
    region: Optional[List[CodeableConcept]] = Field(
        None,
        description='A country, state or other area where the study is taking place rather than its precise geographic location or address.',
        title='Geographic area for the study',
    )
    relatedArtifact: Optional[List[RelatedArtifact]] = Field(
        None,
        description='Citations, references, URLs and other related documents.  When using relatedArtifact to share URLs, the relatedArtifact.type will often be set to one of "documentation" or "supported-with" and the URL value will often be in relatedArtifact.document.url but another possible location is relatedArtifact.resource when it is a canonical URL.',
        title='References, URLs, and attachments',
    )
    resourceType: Literal['ResearchStudy'] = Field(
        'ResearchStudy',
        description='One of the resource types defined as part of FHIR',
        title='Resource Type',
    )
    result: Optional[List[Reference]] = Field(
        None,
        description='Link to one or more sets of results generated by the study.  Could also link to a research registry holding the results such as ClinicalTrials.gov.',
        title='Link to results generated during the study',
    )
    site: Optional[List[Reference]] = Field(
        None,
        description='A facility in which study activities are conducted.',
        title='Facility where study activities are conducted',
    )
    status: Optional[constr(pattern=r'^[^\s]+(\s[^\s]+)*$')] = Field(
        None,
        description='The publication state of the resource (not of the study).',
        title='draft | active | retired | unknown',
    )
    studyDesign: Optional[List[CodeableConcept]] = Field(
        None,
        description='Codes categorizing the type of study such as investigational vs. observational, type of blinding, type of randomization, safety vs. efficacy, etc.',
        title='Classifications of the study design characteristics',
    )
    text: Optional[Narrative] = Field(
        None,
        description='A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.',
        title='Text summary of the resource, for human interpretation',
    )
    title: Optional[constr(pattern=r'[ \r\n\t\S]+')] = Field(
        None,
        description='The human readable name of the research study.',
        title='Human readable name of the study',
    )
    url: Optional[constr(pattern=r'\S*')] = Field(
        None,
        description='Canonical identifier for this study resource, represented as a globally unique URI.',
        title='Canonical identifier for this study resource',
    )
    version: Optional[constr(pattern=r'[ \r\n\t\S]+')] = Field(
        None, title='The business version for the study record'
    )
    whyStopped: Optional[CodeableConcept] = Field(
        None,
        description='A description and/or code explaining the premature termination of the study.',
        title='accrual-goal-met | closed-due-to-toxicity | closed-due-to-lack-of-study-progress | temporarily-closed-per-study-design',
    )


class ResearchStudyAssociatedParty(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    field_name: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_name', title='Extension field for ``name``.'
    )
    classifier: Optional[List[CodeableConcept]] = Field(
        None,
        description='A categorization other than role for the associated party.',
        title='nih | fda | government | nonprofit | academic | industry',
    )
    extension: Optional[List[Extension]] = Field(
        None,
        description='May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.',
        title='Additional content defined by implementations',
    )
    fhir_comments: Optional[Union[str, List[str]]] = Field(None, title='Fhir Comments')
    id: Optional[constr(pattern=r'[ \r\n\t\S]+')] = Field(
        None,
        description='Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.',
        title='Unique id for inter-element referencing',
    )
    links: Optional[List[Link]] = None
    modifierExtension: Optional[List[Extension]] = Field(
        None,
        description="May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
        title='Extensions that cannot be ignored even if unrecognized',
    )
    name: Optional[constr(pattern=r'[ \r\n\t\S]+')] = Field(
        None, title='Name of associated party'
    )
    party: Optional[Reference] = Field(
        None,
        title='Individual or organization associated with study (use practitionerRole to specify their organisation)',
    )
    period: Optional[List[Period]] = Field(
        None,
        description='Identifies the start date and the end date of the associated party in the role.',
        title='When active in the role',
    )
    resourceType: Literal['ResearchStudyAssociatedParty'] = Field(
        'ResearchStudyAssociatedParty',
        description='One of the resource types defined as part of FHIR',
        title='Resource Type',
    )
    role: CodeableConcept = Field(
        ...,
        description='Type of association.',
        title='sponsor | lead-sponsor | sponsor-investigator | primary-investigator | collaborator | funding-source | general-contact | recruitment-contact | sub-investigator | study-director | study-chair',
    )


class ResearchStudyComparisonGroup(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    field_description: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_description', title='Extension field for ``description``.'
    )
    field_linkId: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_linkId', title='Extension field for ``linkId``.'
    )
    field_name: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_name', title='Extension field for ``name``.'
    )
    description: Optional[constr(pattern=r'\s*(\S|\s)*')] = Field(
        None,
        description='A succinct description of the path through the study that would be followed by a subject adhering to this comparisonGroup.',
        title='Short explanation of study path',
    )
    extension: Optional[List[Extension]] = Field(
        None,
        description='May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.',
        title='Additional content defined by implementations',
    )
    fhir_comments: Optional[Union[str, List[str]]] = Field(None, title='Fhir Comments')
    id: Optional[constr(pattern=r'[ \r\n\t\S]+')] = Field(
        None,
        description='Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.',
        title='Unique id for inter-element referencing',
    )
    intendedExposure: Optional[List[Reference]] = Field(
        None, title='Interventions or exposures in this comparisonGroup or cohort'
    )
    linkId: Optional[
        constr(pattern=r'^[A-Za-z0-9\-.]+$', min_length=1, max_length=64)
    ] = Field(
        None,
        title='Allows the comparisonGroup for the study and the comparisonGroup for the subject to be linked easily',
    )
    links: Optional[List[Link]] = None
    modifierExtension: Optional[List[Extension]] = Field(
        None,
        description="May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
        title='Extensions that cannot be ignored even if unrecognized',
    )
    name: Optional[constr(pattern=r'[ \r\n\t\S]+')] = Field(
        None,
        description='Unique, human-readable label for this comparisonGroup of the study.',
        title='Label for study comparisonGroup',
    )
    observedGroup: Optional[Reference] = Field(
        None, title='Group of participants who were enrolled in study comparisonGroup'
    )
    resourceType: Literal['ResearchStudyComparisonGroup'] = Field(
        'ResearchStudyComparisonGroup',
        description='One of the resource types defined as part of FHIR',
        title='Resource Type',
    )
    type: Optional[CodeableConcept] = Field(
        None,
        description='Categorization of study comparisonGroup, e.g. experimental, active comparator, placebo comparater.',
        title='Categorization of study comparisonGroup',
    )


class ResearchStudyLabel(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    field_value: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_value', title='Extension field for ``value``.'
    )
    extension: Optional[List[Extension]] = Field(
        None,
        description='May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.',
        title='Additional content defined by implementations',
    )
    fhir_comments: Optional[Union[str, List[str]]] = Field(None, title='Fhir Comments')
    id: Optional[constr(pattern=r'[ \r\n\t\S]+')] = Field(
        None,
        description='Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.',
        title='Unique id for inter-element referencing',
    )
    links: Optional[List[Link]] = None
    modifierExtension: Optional[List[Extension]] = Field(
        None,
        description="May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
        title='Extensions that cannot be ignored even if unrecognized',
    )
    resourceType: Literal['ResearchStudyLabel'] = Field(
        'ResearchStudyLabel',
        description='One of the resource types defined as part of FHIR',
        title='Resource Type',
    )
    type: Optional[CodeableConcept] = Field(
        None,
        description='Kind of name.',
        title='primary | official | scientific | plain-language | subtitle | short-title | acronym | earlier-title | language | auto-translated | human-use | machine-use | duplicate-uid',
    )
    value: Optional[constr(pattern=r'[ \r\n\t\S]+')] = Field(None, title='The name')


class ResearchStudyObjective(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    field_description: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_description', title='Extension field for ``description``.'
    )
    field_name: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_name', title='Extension field for ``name``.'
    )
    description: Optional[constr(pattern=r'\s*(\S|\s)*')] = Field(
        None,
        description='Free text description of the objective of the study.  This is what the study is trying to achieve rather than how it is going to achieve it (see ResearchStudy.description).',
        title='Description of the objective',
    )
    extension: Optional[List[Extension]] = Field(
        None,
        description='May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.',
        title='Additional content defined by implementations',
    )
    fhir_comments: Optional[Union[str, List[str]]] = Field(None, title='Fhir Comments')
    id: Optional[constr(pattern=r'[ \r\n\t\S]+')] = Field(
        None,
        description='Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.',
        title='Unique id for inter-element referencing',
    )
    links: Optional[List[Link]] = None
    modifierExtension: Optional[List[Extension]] = Field(
        None,
        description="May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
        title='Extensions that cannot be ignored even if unrecognized',
    )
    name: Optional[constr(pattern=r'[ \r\n\t\S]+')] = Field(
        None,
        description='Unique, human-readable label for this objective of the study.',
        title='Label for the objective',
    )
    resourceType: Literal['ResearchStudyObjective'] = Field(
        'ResearchStudyObjective',
        description='One of the resource types defined as part of FHIR',
        title='Resource Type',
    )
    type: Optional[CodeableConcept] = Field(
        None,
        description='The kind of study objective.',
        title='primary | secondary | exploratory',
    )


class ResearchStudyOutcomeMeasure(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    field_description: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_description', title='Extension field for ``description``.'
    )
    field_name: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_name', title='Extension field for ``name``.'
    )
    description: Optional[constr(pattern=r'\s*(\S|\s)*')] = Field(
        None, title='Description of the outcome'
    )
    extension: Optional[List[Extension]] = Field(
        None,
        description='May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.',
        title='Additional content defined by implementations',
    )
    fhir_comments: Optional[Union[str, List[str]]] = Field(None, title='Fhir Comments')
    id: Optional[constr(pattern=r'[ \r\n\t\S]+')] = Field(
        None,
        description='Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.',
        title='Unique id for inter-element referencing',
    )
    links: Optional[List[Link]] = None
    modifierExtension: Optional[List[Extension]] = Field(
        None,
        description="May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
        title='Extensions that cannot be ignored even if unrecognized',
    )
    name: Optional[constr(pattern=r'[ \r\n\t\S]+')] = Field(
        None, title='Label for the outcome'
    )
    reference: Optional[Reference] = Field(None, title='Structured outcome definition')
    resourceType: Literal['ResearchStudyOutcomeMeasure'] = Field(
        'ResearchStudyOutcomeMeasure',
        description='One of the resource types defined as part of FHIR',
        title='Resource Type',
    )
    type: Optional[List[CodeableConcept]] = Field(
        None,
        description='The parameter or characteristic being assessed as one of the values by which the study is assessed.',
        title='primary | secondary | exploratory',
    )


class ResearchStudyProgressStatus(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    field_actual: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_actual', title='Extension field for ``actual``.'
    )
    actual: Optional[bool] = Field(
        None,
        description='An indication of whether or not the date is a known date when the state changed or will change. A value of true indicates a known date. A value of false indicates an estimated date.',
        title='Actual if true else anticipated',
    )
    extension: Optional[List[Extension]] = Field(
        None,
        description='May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.',
        title='Additional content defined by implementations',
    )
    fhir_comments: Optional[Union[str, List[str]]] = Field(None, title='Fhir Comments')
    id: Optional[constr(pattern=r'[ \r\n\t\S]+')] = Field(
        None,
        description='Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.',
        title='Unique id for inter-element referencing',
    )
    links: Optional[List[Link]] = None
    modifierExtension: Optional[List[Extension]] = Field(
        None,
        description="May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
        title='Extensions that cannot be ignored even if unrecognized',
    )
    period: Optional[Period] = Field(None, title='Date range')
    resourceType: Literal['ResearchStudyProgressStatus'] = Field(
        'ResearchStudyProgressStatus',
        description='One of the resource types defined as part of FHIR',
        title='Resource Type',
    )
    state: CodeableConcept = Field(
        ..., title='Label for status or state (e.g. recruitment status)'
    )


class ResearchStudyRecruitment(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    field_actualNumber: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_actualNumber', title='Extension field for ``actualNumber``.'
    )
    field_targetNumber: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_targetNumber', title='Extension field for ``targetNumber``.'
    )
    actualGroup: Optional[Reference] = Field(
        None, title='Group of participants who were enrolled in study'
    )
    actualNumber: Optional[conint(ge=0)] = Field(
        None, title='Actual total number of participants enrolled in study'
    )
    eligibility: Optional[Reference] = Field(
        None, title='Inclusion and exclusion criteria'
    )
    extension: Optional[List[Extension]] = Field(
        None,
        description='May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.',
        title='Additional content defined by implementations',
    )
    fhir_comments: Optional[Union[str, List[str]]] = Field(None, title='Fhir Comments')
    id: Optional[constr(pattern=r'[ \r\n\t\S]+')] = Field(
        None,
        description='Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.',
        title='Unique id for inter-element referencing',
    )
    links: Optional[List[Link]] = None
    modifierExtension: Optional[List[Extension]] = Field(
        None,
        description="May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
        title='Extensions that cannot be ignored even if unrecognized',
    )
    resourceType: Literal['ResearchStudyRecruitment'] = Field(
        'ResearchStudyRecruitment',
        description='One of the resource types defined as part of FHIR',
        title='Resource Type',
    )
    targetNumber: Optional[conint(ge=0)] = Field(
        None, title='Estimated total number of participants to be enrolled'
    )


class Narrative(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    field_div: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_div', title='Extension field for ``div``.'
    )
    field_status: Optional[FHIRPrimitiveExtension] = Field(
        None, alias='_status', title='Extension field for ``status``.'
    )
    div: Optional[str] = Field(
        None,
        description='The actual narrative content, a stripped down version of XHTML.',
        title='Limited xhtml content',
    )
    extension: Optional[List[Extension]] = Field(
        None,
        description='May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.',
        title='Additional content defined by implementations',
    )
    fhir_comments: Optional[Union[str, List[str]]] = Field(None, title='Fhir Comments')
    id: Optional[constr(pattern=r'[ \r\n\t\S]+')] = Field(
        None,
        description='Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.',
        title='Unique id for inter-element referencing',
    )
    links: Optional[List[Link]] = None
    resourceType: Literal['Narrative'] = Field(
        'Narrative',
        description='One of the resource types defined as part of FHIR',
        title='Resource Type',
    )
    status: Optional[constr(pattern=r'^[^\s]+(\s[^\s]+)*$')] = Field(
        None,
        description="The status of the narrative - whether it's entirely generated (from just the defined data or the extensions too), or whether a human authored it and it may contain additional data.",
        title='generated | extensions | additional | empty',
    )


Patient.model_rebuild()
FHIRPrimitiveExtension.model_rebuild()
Extension.model_rebuild()
Address.model_rebuild()
Annotation.model_rebuild()
Reference.model_rebuild()
Identifier.model_rebuild()
CodeableConcept.model_rebuild()
Availability.model_rebuild()
ContactDetail.model_rebuild()
DataRequirement.model_rebuild()
DataRequirementDateFilter.model_rebuild()
Dosage.model_rebuild()
DosageDoseAndRate.model_rebuild()
Timing.model_rebuild()
ExtendedContactDetail.model_rebuild()
Substance.model_rebuild()
ResearchStudy.model_rebuild()
