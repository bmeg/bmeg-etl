
class: sifter
name: g2pPrep
outdir: ../../tables

config:
  base: ../../source/g2p/
  schema: ../../schema
  hugo: ../../tables/hugo2ensembl.tsv
  liftOver: ../../source/g2p/tables/hglft_genome_2749d_8437f0.bed

inputs:
  g2pData:
    glob:
      input: "{{config.base}}/*.vr.json"
      jsonLoad: {}

pipelines:
  main:
    - from: g2pData
    - lookup:
        tsv:
          input: "{{config.hugo}}"
          key: "symbol"
          value: "id"
        replace: genes
    - map:
        method: feature_scan
        gpython: |
          def feature_scan(row):
            out = []
            for feat in row["features"]:
              if "start" in feat and feat["start"] is not None and feat["chromosome"] is not None:
                out.append( "chr%s:%d-%d" % ( feat["chromosome"], int(feat["start"])+1, int(feat["end"]) ) )
            row["locs"] = out
            return row
      docs: Generate array of coordinate strings that will correspond to names of features found in liftover file
    - lookup:
        tsv:
          input: "{{config.liftOver}}"
          header:
            - chromosome
            - start
            - end
            - name
            - status
          key: name
        replace: locs
        copy:
          chromosome: chromosome
          start: start
          end: end
          name: name
      docs: Do lookup from BED file generated by Liftover

    - map:
        method: fix
        gpython: | 
          def fix(row):
            if "association" in row:
              row["description"] = row["association"]["description"]
              if "drug_labels" in row["association"]:
                row["compounds"] = [ { "id" : row["association"]["drug_labels"] } ]
                if 'response_type' in row["association"]:
                  row["response_type"] = row['association']['response_type']
            row["submitter_id"] = row["text_object"]["id"]
            row["project_id"] = row["source"]
            g = []
            for i in row["genes"]:
              g.append( { "id" : i } )
            row["genes"] = g

            a = []
            for feat in row["features"]:
              if "start" in feat and feat["start"] is not None and feat["ref"] is not None and feat["alt"] is not None:
                o = None
                name = "chr%s:%d-%d" % ( feat["chromosome"], int(feat["start"])+1, int(feat["end"]))
                for i in row["locs"]:
                  if isinstance(i, dict):
                    if i["name"] == name:
                      ref = feat["ref"].replace("-", ".")
                      alt = feat["alt"].replace("-", ".")
                      o = {
                        "reference_bases" : ref,
                        "alternate_bases" : alt,
                        "genome" : "GRCh38",
                        "chromosome": i["chromosome"],
                        "start": int(i["start"]),
                        "end" : int(i["end"]),
                        "id" : "%s:chr%s:%d:%s:%s" % ("GRCh38", feat["chromosome"], int(i["start"]), ref, alt )
                      }
                  if o is not None:
                    a.append(o)
            if a:
              row["alleles"] = a
            return row
    - project:
        mapping:
          id: "{{row.submitter_id}}"
    - objectValidate:
        title: GenePhenotypeAssociation
        schema: "{{config.schema}}"
    - map:
        method: prepChembl
        gpython: |
          def prepChembl(row):
            if "compounds" in row:
              row["treatmentid"] = row["compounds"][0]["id"]
            return row
    - emit:
        name: assocationPrep
